{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _d3Collection = require(\"d3-collection\");\n\nvar _GenericChartComponent = require(\"../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _GenericComponent = require(\"../GenericComponent\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ScatterSeries = function (_Component) {\n  _inherits(ScatterSeries, _Component);\n\n  function ScatterSeries(props) {\n    _classCallCheck(this, ScatterSeries);\n\n    var _this = _possibleConstructorReturn(this, (ScatterSeries.__proto__ || Object.getPrototypeOf(ScatterSeries)).call(this, props));\n\n    _this.renderSVG = _this.renderSVG.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    return _this;\n  }\n\n  _createClass(ScatterSeries, [{\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      var xAccessor = moreProps.xAccessor;\n      var points = helper(this.props, moreProps, xAccessor);\n\n      _drawOnCanvas(ctx, this.props, points);\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG(moreProps) {\n      var _props = this.props,\n          className = _props.className,\n          markerProps = _props.markerProps;\n      var xAccessor = moreProps.xAccessor;\n      var points = helper(this.props, moreProps, xAccessor);\n      return _react2.default.createElement(\"g\", {\n        className: className\n      }, points.map(function (point, idx) {\n        var Marker = point.marker;\n        return _react2.default.createElement(Marker, _extends({\n          key: idx\n        }, markerProps, {\n          point: point\n        }));\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(_GenericChartComponent2.default, {\n        svgDraw: this.renderSVG,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: _GenericComponent.getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return ScatterSeries;\n}(_react.Component);\n\nScatterSeries.propTypes = {\n  className: _propTypes2.default.string,\n  yAccessor: _propTypes2.default.func.isRequired,\n  marker: _propTypes2.default.func,\n  markerProvider: _propTypes2.default.func,\n  markerProps: _propTypes2.default.object\n};\nScatterSeries.defaultProps = {\n  className: \"react-stockcharts-scatter\"\n};\n\nfunction helper(props, moreProps, xAccessor) {\n  var yAccessor = props.yAccessor,\n      markerProvider = props.markerProvider,\n      markerProps = props.markerProps;\n  var Marker = props.marker;\n  var xScale = moreProps.xScale,\n      yScale = moreProps.chartConfig.yScale,\n      plotData = moreProps.plotData;\n  if (!(markerProvider || Marker)) throw new Error(\"required prop, either marker or markerProvider missing\");\n  return plotData.map(function (d) {\n    if (markerProvider) Marker = markerProvider(d);\n\n    var mProps = _extends({}, Marker.defaultProps, markerProps);\n\n    var fill = (0, _utils.functor)(mProps.fill);\n    var stroke = (0, _utils.functor)(mProps.stroke);\n    return {\n      x: xScale(xAccessor(d)),\n      y: yScale(yAccessor(d)),\n      fill: (0, _utils.hexToRGBA)(fill(d), mProps.opacity),\n      stroke: stroke(d),\n      datum: d,\n      marker: Marker\n    };\n  });\n}\n\nfunction _drawOnCanvas(ctx, props, points) {\n  var markerProps = props.markerProps;\n  var nest = (0, _d3Collection.nest)().key(function (d) {\n    return d.fill;\n  }).key(function (d) {\n    return d.stroke;\n  }).entries(points);\n  nest.forEach(function (fillGroup) {\n    var fillKey = fillGroup.key,\n        fillValues = fillGroup.values;\n\n    if (fillKey !== \"none\") {\n      ctx.fillStyle = fillKey;\n    }\n\n    fillValues.forEach(function (strokeGroup) {\n      // var { key: strokeKey, values: strokeValues } = strokeGroup;\n      var strokeValues = strokeGroup.values;\n      strokeValues.forEach(function (point) {\n        var marker = point.marker;\n        marker.drawOnCanvas(_extends({}, marker.defaultProps, markerProps, {\n          fill: fillKey\n        }), point, ctx);\n      });\n    });\n  });\n}\n\nexports.default = ScatterSeries;","map":null,"metadata":{},"sourceType":"script"}