{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { scaleOrdinal, schemeCategory10 } from \"d3-scale\";\nimport { bisector } from \"d3-array\";\nimport noop from \"./noop\";\nimport identity from \"./identity\";\nexport { default as rebind } from \"./rebind\";\nexport { default as zipper } from \"./zipper\";\nexport { default as merge } from \"./merge\";\nexport { default as slidingWindow } from \"./slidingWindow\";\nexport { default as identity } from \"./identity\";\nexport { default as noop } from \"./noop\";\nexport { default as shallowEqual } from \"./shallowEqual\";\nexport { default as mappedSlidingWindow } from \"./mappedSlidingWindow\";\nexport { default as accumulatingWindow } from \"./accumulatingWindow\";\nexport { default as PureComponent } from \"./PureComponent\";\nexport * from \"./barWidth\";\nexport * from \"./strokeDasharray\";\nexport function getLogger(prefix) {\n  var logger = noop;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    logger = require(\"debug\")(\"react-stockcharts:\" + prefix);\n  }\n\n  return logger;\n}\nexport function sign(x) {\n  return (x > 0) - (x < 0);\n}\nexport var yes = function yes() {\n  return true;\n};\nexport function path() {\n  var loc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var key = Array.isArray(loc) ? loc : [loc];\n  var length = key.length;\n  return function (obj, defaultValue) {\n    if (length === 0) return isDefined(obj) ? obj : defaultValue;\n    var index = 0;\n\n    while (obj != null && index < length) {\n      obj = obj[key[index++]];\n    }\n\n    return index === length ? obj : defaultValue;\n  };\n}\nexport function functor(v) {\n  return typeof v === \"function\" ? v : function () {\n    return v;\n  };\n}\nexport function createVerticalLinearGradient(stops) {\n  return function (moreProps, ctx) {\n    var height = moreProps.chartConfig.height;\n    var grd = ctx.createLinearGradient(0, height, 0, 0);\n    stops.forEach(function (each) {\n      grd.addColorStop(each.stop, each.color);\n    });\n    return grd;\n  };\n}\nexport function getClosestItemIndexes2(array, value, accessor) {\n  var left = bisector(accessor).left(array, value);\n  left = Math.max(left - 1, 0);\n  var right = Math.min(left + 1, array.length - 1);\n  var item = accessor(array[left]);\n  if (item >= value && item <= value) right = left;\n  return {\n    left: left,\n    right: right\n  };\n}\nexport function degrees(radians) {\n  return radians * 180 / Math.PI;\n}\nexport function radians(degrees) {\n  return degrees * Math.PI / 180;\n}\nexport function getClosestValue(inputValue, currentValue) {\n  var values = isArray(inputValue) ? inputValue : [inputValue];\n  var diff = values.map(function (each) {\n    return each - currentValue;\n  }).reduce(function (diff1, diff2) {\n    return Math.abs(diff1) < Math.abs(diff2) ? diff1 : diff2;\n  });\n  return currentValue + diff;\n}\nexport function find(list, predicate) {\n  var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;\n\n  for (var i = 0; i < list.length; ++i) {\n    if (predicate.call(context, list[i], i, list)) {\n      return list[i];\n    }\n  }\n\n  return undefined;\n}\nexport function d3Window(node) {\n  var d3win = node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  return d3win;\n}\nexport var MOUSEENTER = \"mouseenter.interaction\";\nexport var MOUSELEAVE = \"mouseleave.interaction\";\nexport var MOUSEMOVE = \"mousemove.pan\";\nexport var MOUSEUP = \"mouseup.pan\";\nexport var TOUCHMOVE = \"touchmove.pan\";\nexport var TOUCHEND = \"touchend.pan touchcancel.pan\";\nexport function getTouchProps(touch) {\n  if (!touch) return {};\n  return {\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    clientX: touch.clientX,\n    clientY: touch.clientY\n  };\n}\nexport function getClosestItemIndexes(array, value, accessor, log) {\n  var lo = 0,\n      hi = array.length - 1;\n\n  while (hi - lo > 1) {\n    var mid = Math.round((lo + hi) / 2);\n\n    if (accessor(array[mid]) <= value) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  } // for Date object === does not work, so using the <= in combination with >=\n  // the same code works for both dates and numbers\n\n\n  if (accessor(array[lo]).valueOf() === value.valueOf()) hi = lo;\n  if (accessor(array[hi]).valueOf() === value.valueOf()) lo = hi;\n  if (accessor(array[lo]) < value && accessor(array[hi]) < value) lo = hi;\n  if (accessor(array[lo]) > value && accessor(array[hi]) > value) hi = lo;\n\n  if (log) {} // console.log(lo, accessor(array[lo]), value, accessor(array[hi]), hi);\n  // console.log(accessor(array[lo]), lo, value, accessor(array[lo]) >= value);\n  // console.log(value, hi, accessor(array[hi]), accessor(array[lo]) <= value);\n  // var left = value > accessor(array[lo]) ? lo : lo;\n  // var right = gte(value, accessor(array[hi])) ? Math.min(hi + 1, array.length - 1) : hi;\n  // console.log(value, accessor(array[left]), accessor(array[right]));\n\n\n  return {\n    left: lo,\n    right: hi\n  };\n}\nexport function getClosestItem(array, value, accessor, log) {\n  var _getClosestItemIndexe = getClosestItemIndexes(array, value, accessor, log),\n      left = _getClosestItemIndexe.left,\n      right = _getClosestItemIndexe.right;\n\n  if (left === right) {\n    return array[left];\n  }\n\n  var closest = Math.abs(accessor(array[left]) - value) < Math.abs(accessor(array[right]) - value) ? array[left] : array[right];\n\n  if (log) {\n    console.log(array[left], array[right], closest, left, right);\n  }\n\n  return closest;\n}\nexport var overlayColors = scaleOrdinal(schemeCategory10);\nexport function head(array, accessor) {\n  if (accessor && array) {\n    var value = void 0;\n\n    for (var i = 0; i < array.length; i++) {\n      value = array[i];\n      if (isDefined(accessor(value))) return value;\n    }\n\n    return undefined;\n  }\n\n  return array ? array[0] : undefined;\n}\nexport function tail(array, accessor) {\n  if (accessor && array) {\n    return array.map(accessor).slice(1);\n  }\n\n  return array ? array.slice(1) : undefined;\n}\nexport var first = head;\nexport function last(array, accessor) {\n  if (accessor && array) {\n    var value = void 0;\n\n    for (var i = array.length - 1; i >= 0; i--) {\n      value = array[i];\n      if (isDefined(accessor(value))) return value;\n    }\n\n    return undefined;\n  }\n\n  var length = array ? array.length : 0;\n  return length ? array[length - 1] : undefined;\n}\nexport function isDefined(d) {\n  return d !== null && typeof d != \"undefined\";\n}\nexport function isNotDefined(d) {\n  return !isDefined(d);\n}\nexport function isObject(d) {\n  return isDefined(d) && (typeof d === \"undefined\" ? \"undefined\" : _typeof(d)) === \"object\" && !Array.isArray(d);\n}\nexport var isArray = Array.isArray;\nexport function touchPosition(touch, e) {\n  var container = e.target,\n      rect = container.getBoundingClientRect(),\n      x = touch.clientX - rect.left - container.clientLeft,\n      y = touch.clientY - rect.top - container.clientTop,\n      xy = [Math.round(x), Math.round(y)];\n  return xy;\n}\nexport function mousePosition(e, defaultRect) {\n  var container = e.currentTarget;\n  var rect = defaultRect || container.getBoundingClientRect(),\n      x = e.clientX - rect.left - container.clientLeft,\n      y = e.clientY - rect.top - container.clientTop,\n      xy = [Math.round(x), Math.round(y)];\n  return xy;\n}\nexport function clearCanvas(canvasList, ratio) {\n  canvasList.forEach(function (each) {\n    each.setTransform(1, 0, 0, 1, 0, 0);\n    each.clearRect(-1, -1, each.canvas.width + 2, each.canvas.height + 2);\n    each.scale(ratio, ratio);\n  });\n}\nexport function capitalizeFirst(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\nexport function hexToRGBA(inputHex, opacity) {\n  var hex = inputHex.replace(\"#\", \"\");\n\n  if (inputHex.indexOf(\"#\") > -1 && (hex.length === 3 || hex.length === 6)) {\n    var multiplier = hex.length === 3 ? 1 : 2;\n    var r = parseInt(hex.substring(0, 1 * multiplier), 16);\n    var g = parseInt(hex.substring(1 * multiplier, 2 * multiplier), 16);\n    var b = parseInt(hex.substring(2 * multiplier, 3 * multiplier), 16);\n    var result = \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + opacity + \")\";\n    return result;\n  }\n\n  return inputHex;\n}\nexport function toObject(array) {\n  var iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;\n  return array.reduce(function (returnObj, a) {\n    var _iteratee = iteratee(a),\n        _iteratee2 = _slicedToArray(_iteratee, 2),\n        key = _iteratee2[0],\n        value = _iteratee2[1];\n\n    return _extends({}, returnObj, _defineProperty({}, key, value));\n  }, {});\n} // copied from https://github.com/lodash/lodash/blob/master/mapValue.js\n\nexport function mapValue(object, iteratee) {\n  object = Object(object); // eslint-disable-next-line prefer-const\n\n  var result = {};\n  Object.keys(object).forEach(function (key) {\n    var mappedValue = iteratee(object[key], key, object);\n\n    if (isDefined(mappedValue)) {\n      result[key] = mappedValue;\n    }\n  });\n  return result;\n} // copied from https://github.com/lodash/lodash/blob/master/mapObject.js\n\nexport function mapObject() {\n  var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;\n  var props = Object.keys(object); // eslint-disable-next-line prefer-const\n\n  var result = new Array(props.length);\n  props.forEach(function (key, index) {\n    result[index] = iteratee(object[key], key, object);\n  });\n  return result;\n}\nexport function replaceAtIndex(array, index, value) {\n  if (isDefined(array) && array.length > index) {\n    return array.slice(0, index).concat(value).concat(array.slice(index + 1));\n  }\n\n  return array;\n} // copied from https://github.com/lodash/lodash/blob/master/forOwn.js\n\nexport function forOwn(obj, iteratee) {\n  var object = Object(obj);\n  Object.keys(object).forEach(function (key) {\n    return iteratee(object[key], key, object);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}