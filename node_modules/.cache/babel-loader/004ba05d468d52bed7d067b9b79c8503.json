{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _d3Shape = require(\"d3-shape\");\n\nvar _GenericChartComponent = require(\"../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _GenericComponent = require(\"../GenericComponent\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar KagiSeries = function (_Component) {\n  _inherits(KagiSeries, _Component);\n\n  function KagiSeries(props) {\n    _classCallCheck(this, KagiSeries);\n\n    var _this = _possibleConstructorReturn(this, (KagiSeries.__proto__ || Object.getPrototypeOf(KagiSeries)).call(this, props));\n\n    _this.renderSVG = _this.renderSVG.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    return _this;\n  }\n\n  _createClass(KagiSeries, [{\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      var xAccessor = moreProps.xAccessor;\n\n      _drawOnCanvas(ctx, this.props, moreProps, xAccessor);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(_GenericChartComponent2.default, {\n        svgDraw: this.renderSVG,\n        canvasToDraw: _GenericComponent.getAxisCanvas,\n        canvasDraw: this.drawOnCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG(moreProps) {\n      var xAccessor = moreProps.xAccessor;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData;\n      var _props = this.props,\n          className = _props.className,\n          stroke = _props.stroke,\n          fill = _props.fill,\n          strokeWidth = _props.strokeWidth;\n      var paths = helper(plotData, xAccessor).map(function (each, i) {\n        var dataSeries = (0, _d3Shape.line)().x(function (item) {\n          return xScale(item[0]);\n        }).y(function (item) {\n          return yScale(item[1]);\n        }).curve(_d3Shape.curveStepBefore);\n        dataSeries(each.plot);\n        return _react2.default.createElement(\"path\", {\n          key: i,\n          d: dataSeries(each.plot),\n          className: each.type,\n          stroke: stroke[each.type],\n          fill: fill[each.type],\n          strokeWidth: strokeWidth\n        });\n      });\n      return _react2.default.createElement(\"g\", {\n        className: className\n      }, paths);\n    }\n  }]);\n\n  return KagiSeries;\n}(_react.Component);\n\nKagiSeries.propTypes = {\n  className: _propTypes2.default.string,\n  stroke: _propTypes2.default.object,\n  fill: _propTypes2.default.object,\n  strokeWidth: _propTypes2.default.number.isRequired\n};\nKagiSeries.defaultProps = {\n  className: \"react-stockcharts-kagi\",\n  strokeWidth: 2,\n  stroke: {\n    yang: \"#6BA583\",\n    yin: \"#E60000\"\n  },\n  fill: {\n    yang: \"none\",\n    yin: \"none\"\n  },\n  currentValueStroke: \"#000000\"\n};\n\nfunction _drawOnCanvas(ctx, props, moreProps, xAccessor) {\n  var stroke = props.stroke,\n      strokeWidth = props.strokeWidth,\n      currentValueStroke = props.currentValueStroke;\n  var xScale = moreProps.xScale,\n      yScale = moreProps.chartConfig.yScale,\n      plotData = moreProps.plotData;\n  var paths = helper(plotData, xAccessor);\n  var begin = true;\n  paths.forEach(function (each) {\n    ctx.strokeStyle = stroke[each.type];\n    ctx.lineWidth = strokeWidth;\n    ctx.beginPath();\n    var prevX = void 0;\n    each.plot.forEach(function (d) {\n      var _ref = [xScale(d[0]), yScale(d[1])],\n          x = _ref[0],\n          y = _ref[1];\n\n      if (begin) {\n        ctx.moveTo(x, y);\n        begin = false;\n      } else {\n        if ((0, _utils.isDefined)(prevX)) {\n          ctx.lineTo(prevX, y);\n        }\n\n        ctx.lineTo(x, y);\n      }\n\n      prevX = x; // console.log(d);\n    });\n    ctx.stroke();\n  });\n  var lastPlot = paths[paths.length - 1].plot;\n  var last = lastPlot[lastPlot.length - 1];\n  ctx.beginPath(); // ctx.strokeStyle = \"black\";\n\n  ctx.lineWidth = 1;\n  var _ref2 = [xScale(last[0]), yScale(last[2]), yScale(last[3])],\n      x = _ref2[0],\n      y1 = _ref2[1],\n      y2 = _ref2[2]; // console.log(last, x, y);\n\n  ctx.moveTo(x, y1);\n  ctx.lineTo(x + 10, y1);\n  ctx.stroke();\n  ctx.beginPath();\n  ctx.strokeStyle = currentValueStroke;\n  ctx.moveTo(x - 10, y2);\n  ctx.lineTo(x, y2);\n  ctx.stroke();\n}\n\nfunction helper(plotData, xAccessor) {\n  var kagiLine = [];\n  var kagi = {};\n  var d = plotData[0];\n  var idx = xAccessor(d);\n\n  for (var i = 0; i < plotData.length; i++) {\n    d = plotData[i];\n    if ((0, _utils.isNotDefined)(d.close)) continue;\n    if ((0, _utils.isNotDefined)(kagi.type)) kagi.type = d.startAs;\n    if ((0, _utils.isNotDefined)(kagi.plot)) kagi.plot = [];\n    idx = xAccessor(d);\n    kagi.plot.push([idx, d.open]);\n\n    if ((0, _utils.isDefined)(d.changeTo)) {\n      kagi.plot.push([idx, d.changePoint]);\n      kagi.added = true;\n      kagiLine.push(kagi);\n      kagi = {\n        type: d.changeTo,\n        plot: [],\n        added: false\n      };\n      kagi.plot.push([idx, d.changePoint]);\n    }\n  }\n\n  if (!kagi.added) {\n    kagi.plot.push([idx, d.close, d.current, d.reverseAt]);\n    kagiLine.push(kagi);\n  } // console.log(d.reverseAt);\n\n\n  return kagiLine;\n}\n\nexports.default = KagiSeries;","map":null,"metadata":{},"sourceType":"script"}