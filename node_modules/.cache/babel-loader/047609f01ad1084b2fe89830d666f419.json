{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _GenericChartComponent = require(\"../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _GenericComponent = require(\"../GenericComponent\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar PointAndFigureSeries = function (_Component) {\n  _inherits(PointAndFigureSeries, _Component);\n\n  function PointAndFigureSeries(props) {\n    _classCallCheck(this, PointAndFigureSeries);\n\n    var _this = _possibleConstructorReturn(this, (PointAndFigureSeries.__proto__ || Object.getPrototypeOf(PointAndFigureSeries)).call(this, props));\n\n    _this.renderSVG = _this.renderSVG.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    return _this;\n  }\n\n  _createClass(PointAndFigureSeries, [{\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      var xAccessor = moreProps.xAccessor;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData;\n      var columns = getColumns(xScale, xAccessor, yScale, plotData);\n\n      _drawOnCanvas(ctx, this.props, columns);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var clip = this.props.clip;\n      return _react2.default.createElement(_GenericChartComponent2.default, {\n        clip: clip,\n        svgDraw: this.renderSVG,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: _GenericComponent.getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG(moreProps) {\n      var xAccessor = moreProps.xAccessor;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData;\n      var _props = this.props,\n          stroke = _props.stroke,\n          fill = _props.fill,\n          strokeWidth = _props.strokeWidth,\n          className = _props.className;\n      var columns = getColumns(xScale, xAccessor, yScale, plotData);\n      return _react2.default.createElement(\"g\", {\n        className: className\n      }, columns.map(function (col, idx) {\n        return _react2.default.createElement(\"g\", {\n          key: idx,\n          className: col.className,\n          transform: \"translate(\" + col.offset[0] + \", \" + col.offset[1] + \")\"\n        }, col.boxes.map(function (box, i) {\n          if (col.direction > 0) {\n            return _react2.default.createElement(\"g\", {\n              key: idx + \"-\" + i\n            }, _react2.default.createElement(\"line\", {\n              className: \"up\",\n              strokeWidth: strokeWidth,\n              stroke: stroke.up,\n              fill: fill.up,\n              x1: 0,\n              y1: box.open,\n              x2: box.columnWidth,\n              y2: box.close\n            }), _react2.default.createElement(\"line\", {\n              className: \"up\",\n              strokeWidth: strokeWidth,\n              stroke: stroke.up,\n              fill: fill.up,\n              x1: 0,\n              y1: box.close,\n              x2: box.columnWidth,\n              y2: box.open\n            }));\n          }\n\n          return _react2.default.createElement(\"ellipse\", {\n            key: idx + \"-\" + i,\n            className: \"down\",\n            strokeWidth: strokeWidth,\n            stroke: stroke.down,\n            fill: fill.down,\n            cx: box.columnWidth / 2,\n            cy: (box.open + box.close) / 2,\n            rx: box.columnWidth / 2,\n            ry: box.boxHeight / 2\n          });\n        }));\n      }));\n    }\n  }]);\n\n  return PointAndFigureSeries;\n}(_react.Component);\n\nPointAndFigureSeries.propTypes = {\n  className: _propTypes2.default.string,\n  strokeWidth: _propTypes2.default.number.isRequired,\n  stroke: _propTypes2.default.object.isRequired,\n  fill: _propTypes2.default.object.isRequired,\n  clip: _propTypes2.default.bool.isRequired\n};\nPointAndFigureSeries.defaultProps = {\n  className: \"react-stockcharts-point-and-figure\",\n  strokeWidth: 1,\n  stroke: {\n    up: \"#6BA583\",\n    down: \"#FF0000\"\n  },\n  fill: {\n    up: \"none\",\n    down: \"none\"\n  },\n  clip: true\n};\n\nfunction _drawOnCanvas(ctx, props, columns) {\n  var stroke = props.stroke,\n      fill = props.fill,\n      strokeWidth = props.strokeWidth;\n  ctx.lineWidth = strokeWidth;\n  columns.forEach(function (col) {\n    var _col$offset = _slicedToArray(col.offset, 2),\n        offsetX = _col$offset[0],\n        offsetY = _col$offset[1];\n\n    col.boxes.forEach(function (box) {\n      if (col.direction > 0) {\n        ctx.fillStyle = fill.up;\n        ctx.strokeStyle = stroke.up;\n        ctx.beginPath();\n        ctx.moveTo(offsetX, offsetY + box.open);\n        ctx.lineTo(offsetX + box.columnWidth, offsetY + box.close);\n        ctx.moveTo(offsetX, offsetY + box.close);\n        ctx.lineTo(offsetX + box.columnWidth, offsetY + box.open);\n        ctx.stroke();\n      } else {\n        ctx.fillStyle = fill.down;\n        ctx.strokeStyle = stroke.down;\n        ctx.beginPath();\n        var x = offsetX + box.columnWidth / 2,\n            y = offsetY + box.open + box.boxHeight / 2;\n        var rx = box.columnWidth / 2,\n            ry = box.boxHeight / 2;\n        ctx.ellipse(x, y, rx, ry, 0, 0, 2 * Math.PI);\n        ctx.stroke();\n      }\n    });\n  });\n  ctx.stroke();\n}\n\nfunction getColumns(xScale, xAccessor, yScale, plotData) {\n  var width = xScale(xAccessor(plotData[plotData.length - 1])) - xScale(xAccessor(plotData[0]));\n  var columnWidth = width / (plotData.length - 1);\n  var anyBox = void 0,\n      j = 0;\n\n  while ((0, _utils.isNotDefined)(anyBox)) {\n    if ((0, _utils.isDefined)(plotData[j].close)) {\n      anyBox = plotData[j].boxes[0];\n    } else {\n      break;\n    }\n\n    j++;\n  }\n\n  var boxHeight = Math.abs(yScale(anyBox.open) - yScale(anyBox.close));\n  var columns = plotData.filter(function (d) {\n    return (0, _utils.isDefined)(d.close);\n  }).map(function (d) {\n    var boxes = d.boxes.map(function (box) {\n      return {\n        columnWidth: columnWidth,\n        boxHeight: boxHeight,\n        open: yScale(box.open),\n        close: yScale(box.close)\n      };\n    });\n    var xOffset = xScale(xAccessor(d)) - columnWidth / 2;\n    return {\n      boxes: boxes,\n      direction: d.direction,\n      offset: [xOffset, 0]\n    };\n  });\n  return columns;\n}\n\nexports.default = PointAndFigureSeries;","map":null,"metadata":{},"sourceType":"script"}