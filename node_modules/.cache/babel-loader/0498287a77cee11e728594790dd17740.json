{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/*\nhttps://github.com/ScottLogic/d3fc/blob/master/src/indicator/algorithm/calculator/macd.js\n\nThe MIT License (MIT)\n\nCopyright (c) 2014-2015 Scott Logic Ltd.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n\nexports.default = function () {\n  var options = _defaultOptionsForComputation.MACD;\n\n  function calculator(data) {\n    var _options = options,\n        fast = _options.fast,\n        slow = _options.slow,\n        signal = _options.signal,\n        sourcePath = _options.sourcePath;\n    var fastEMA = (0, _ema2.default)().options({\n      windowSize: fast,\n      sourcePath: sourcePath\n    });\n    var slowEMA = (0, _ema2.default)().options({\n      windowSize: slow,\n      sourcePath: sourcePath\n    });\n    var signalEMA = (0, _ema2.default)().options({\n      windowSize: signal,\n      sourcePath: undefined\n    });\n    var macdCalculator = (0, _utils.zipper)().combine(function (fastEMA, slowEMA) {\n      return (0, _utils.isDefined)(fastEMA) && (0, _utils.isDefined)(slowEMA) ? fastEMA - slowEMA : undefined;\n    });\n    var macdArray = macdCalculator(fastEMA(data), slowEMA(data));\n    var undefinedArray = new Array(slow);\n    var signalArray = undefinedArray.concat(signalEMA(macdArray.slice(slow)));\n    var zip = (0, _utils.zipper)().combine(function (macd, signal) {\n      return {\n        macd: macd,\n        signal: signal,\n        divergence: (0, _utils.isDefined)(macd) && (0, _utils.isDefined)(signal) ? macd - signal : undefined\n      };\n    });\n    var macd = zip(macdArray, signalArray);\n    return macd;\n  }\n\n  calculator.undefinedLength = function () {\n    var _options2 = options,\n        slow = _options2.slow,\n        signal = _options2.signal;\n    return slow + signal - 1;\n  };\n\n  calculator.options = function (x) {\n    if (!arguments.length) {\n      return options;\n    }\n\n    options = _extends({}, _defaultOptionsForComputation.MACD, x);\n    return calculator;\n  };\n\n  return calculator;\n};\n\nvar _ema = require(\"./ema\");\n\nvar _ema2 = _interopRequireDefault(_ema);\n\nvar _utils = require(\"../utils\");\n\nvar _defaultOptionsForComputation = require(\"./defaultOptionsForComputation\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}","map":null,"metadata":{},"sourceType":"script"}