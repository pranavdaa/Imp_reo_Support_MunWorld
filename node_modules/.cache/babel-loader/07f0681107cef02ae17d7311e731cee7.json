{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _d3Shape = require(\"d3-shape\");\n\nvar _GenericChartComponent = require(\"../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _GenericComponent = require(\"../GenericComponent\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar AreaOnlySeries = function (_Component) {\n  _inherits(AreaOnlySeries, _Component);\n\n  function AreaOnlySeries(props) {\n    _classCallCheck(this, AreaOnlySeries);\n\n    var _this = _possibleConstructorReturn(this, (AreaOnlySeries.__proto__ || Object.getPrototypeOf(AreaOnlySeries)).call(this, props));\n\n    _this.renderSVG = _this.renderSVG.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    return _this;\n  }\n\n  _createClass(AreaOnlySeries, [{\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      var _props = this.props,\n          yAccessor = _props.yAccessor,\n          defined = _props.defined,\n          base = _props.base,\n          canvasGradient = _props.canvasGradient;\n      var _props2 = this.props,\n          fill = _props2.fill,\n          stroke = _props2.stroke,\n          opacity = _props2.opacity,\n          interpolation = _props2.interpolation,\n          canvasClip = _props2.canvasClip;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData,\n          xAccessor = moreProps.xAccessor;\n\n      if (canvasClip) {\n        ctx.save();\n        canvasClip(ctx, moreProps);\n      }\n\n      if (canvasGradient != null) {\n        ctx.fillStyle = canvasGradient(moreProps, ctx);\n      } else {\n        ctx.fillStyle = (0, _utils.hexToRGBA)(fill, opacity);\n      }\n\n      ctx.strokeStyle = stroke;\n      ctx.beginPath();\n      var newBase = (0, _utils.functor)(base);\n      var areaSeries = (0, _d3Shape.area)().defined(function (d) {\n        return defined(yAccessor(d));\n      }).x(function (d) {\n        return Math.round(xScale(xAccessor(d)));\n      }).y0(function (d) {\n        return newBase(yScale, d, moreProps);\n      }).y1(function (d) {\n        return Math.round(yScale(yAccessor(d)));\n      }).context(ctx);\n\n      if ((0, _utils.isDefined)(interpolation)) {\n        areaSeries.curve(interpolation);\n      }\n\n      areaSeries(plotData);\n      ctx.fill();\n\n      if (canvasClip) {\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG(moreProps) {\n      var _props3 = this.props,\n          yAccessor = _props3.yAccessor,\n          defined = _props3.defined,\n          base = _props3.base,\n          style = _props3.style;\n      var _props4 = this.props,\n          stroke = _props4.stroke,\n          fill = _props4.fill,\n          className = _props4.className,\n          opacity = _props4.opacity,\n          interpolation = _props4.interpolation;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData,\n          xAccessor = moreProps.xAccessor;\n      var newBase = (0, _utils.functor)(base);\n      var areaSeries = (0, _d3Shape.area)().defined(function (d) {\n        return defined(yAccessor(d));\n      }).x(function (d) {\n        return Math.round(xScale(xAccessor(d)));\n      }).y0(function (d) {\n        return newBase(yScale, d, moreProps);\n      }).y1(function (d) {\n        return Math.round(yScale(yAccessor(d)));\n      });\n\n      if ((0, _utils.isDefined)(interpolation)) {\n        areaSeries.curve(interpolation);\n      }\n\n      var d = areaSeries(plotData);\n      var newClassName = className.concat((0, _utils.isDefined)(stroke) ? \"\" : \" line-stroke\");\n      return _react2.default.createElement(\"path\", {\n        style: style,\n        d: d,\n        stroke: stroke,\n        fill: (0, _utils.hexToRGBA)(fill, opacity),\n        className: newClassName\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(_GenericChartComponent2.default, {\n        svgDraw: this.renderSVG,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: _GenericComponent.getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return AreaOnlySeries;\n}(_react.Component);\n\nAreaOnlySeries.propTypes = {\n  className: _propTypes2.default.string,\n  yAccessor: _propTypes2.default.func.isRequired,\n  stroke: _propTypes2.default.string,\n  fill: _propTypes2.default.string,\n  opacity: _propTypes2.default.number,\n  defined: _propTypes2.default.func,\n  base: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.number]),\n  interpolation: _propTypes2.default.func,\n  canvasClip: _propTypes2.default.func,\n  style: _propTypes2.default.object,\n  canvasGradient: _propTypes2.default.func\n};\nAreaOnlySeries.defaultProps = {\n  className: \"line \",\n  fill: \"none\",\n  opacity: 1,\n  defined: function defined(d) {\n    return !isNaN(d);\n  },\n  base: function base(yScale\n  /* , d, moreProps */\n  ) {\n    return (0, _utils.first)(yScale.range());\n  }\n};\nexports.default = AreaOnlySeries;","map":null,"metadata":{},"sourceType":"script"}