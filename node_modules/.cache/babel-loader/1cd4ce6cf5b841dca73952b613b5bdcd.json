{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { isDefined, getLogger } from \"./utils\";\nvar log = getLogger(\"CanvasContainer\");\n\nvar CanvasContainer = function (_Component) {\n  _inherits(CanvasContainer, _Component);\n\n  function CanvasContainer(props) {\n    _classCallCheck(this, CanvasContainer);\n\n    var _this = _possibleConstructorReturn(this, (CanvasContainer.__proto__ || Object.getPrototypeOf(CanvasContainer)).call(this, props));\n\n    _this.setDrawCanvas = _this.setDrawCanvas.bind(_this);\n    _this.drawCanvas = {};\n    return _this;\n  }\n\n  _createClass(CanvasContainer, [{\n    key: \"setDrawCanvas\",\n    value: function setDrawCanvas(node) {\n      if (isDefined(node)) this.drawCanvas[node.id] = node.getContext(\"2d\");else this.drawCanvas = {};\n    }\n  }, {\n    key: \"getCanvasContexts\",\n    value: function getCanvasContexts() {\n      if (isDefined(this.drawCanvas.axes)) {\n        return this.drawCanvas;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          height = _props.height,\n          width = _props.width,\n          type = _props.type,\n          zIndex = _props.zIndex,\n          ratio = _props.ratio;\n      if (type === \"svg\") return null;\n      log(\"using ratio \", ratio);\n      return React.createElement(\"div\", {\n        style: {\n          position: \"absolute\",\n          zIndex: zIndex\n        }\n      }, React.createElement(\"canvas\", {\n        id: \"bg\",\n        ref: this.setDrawCanvas,\n        width: width * ratio,\n        height: height * ratio,\n        style: {\n          position: \"absolute\",\n          width: width,\n          height: height\n        }\n      }), React.createElement(\"canvas\", {\n        id: \"axes\",\n        ref: this.setDrawCanvas,\n        width: width * ratio,\n        height: height * ratio,\n        style: {\n          position: \"absolute\",\n          width: width,\n          height: height\n        }\n      }), React.createElement(\"canvas\", {\n        id: \"mouseCoord\",\n        ref: this.setDrawCanvas,\n        width: width * ratio,\n        height: height * ratio,\n        style: {\n          position: \"absolute\",\n          width: width,\n          height: height\n        }\n      }));\n    }\n  }]);\n\n  return CanvasContainer;\n}(Component);\n/*\n\t\t\t\t<canvas id=\"hover\" ref={this.setDrawCanvas} width={width * ratio} height={height * ratio}\n\t\t\t\t\tstyle={{ position: \"absolute\", width: width, height: height }} />\n*/\n\n\nCanvasContainer.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  type: PropTypes.string.isRequired,\n  zIndex: PropTypes.number,\n  ratio: PropTypes.number.isRequired\n};\nexport default CanvasContainer;","map":null,"metadata":{},"sourceType":"module"}