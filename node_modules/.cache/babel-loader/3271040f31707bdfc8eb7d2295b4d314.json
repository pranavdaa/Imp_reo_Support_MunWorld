{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { isNotDefined, isDefined, noop, functor, identity } from \"./utils\";\nvar aliases = {\n  mouseleave: \"mousemove\",\n  // to draw interactive after mouse exit\n  panend: \"pan\",\n  pinchzoom: \"pan\",\n  mousedown: \"mousemove\",\n  click: \"mousemove\",\n  contextmenu: \"mousemove\",\n  dblclick: \"mousemove\",\n  dragstart: \"drag\",\n  dragend: \"drag\",\n  dragcancel: \"drag\"\n};\n\nvar GenericComponent = function (_Component) {\n  _inherits(GenericComponent, _Component);\n\n  function GenericComponent(props, context) {\n    _classCallCheck(this, GenericComponent);\n\n    var _this = _possibleConstructorReturn(this, (GenericComponent.__proto__ || Object.getPrototypeOf(GenericComponent)).call(this, props, context));\n\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    _this.getMoreProps = _this.getMoreProps.bind(_this);\n    _this.listener = _this.listener.bind(_this);\n    _this.draw = _this.draw.bind(_this);\n    _this.updateMoreProps = _this.updateMoreProps.bind(_this);\n    _this.evaluateType = _this.evaluateType.bind(_this);\n    _this.isHover = _this.isHover.bind(_this);\n    _this.preCanvasDraw = _this.preCanvasDraw.bind(_this);\n    _this.postCanvasDraw = _this.postCanvasDraw.bind(_this);\n    _this.getPanConditions = _this.getPanConditions.bind(_this);\n    _this.shouldTypeProceed = _this.shouldTypeProceed.bind(_this);\n    _this.preEvaluate = _this.preEvaluate.bind(_this);\n    var generateSubscriptionId = context.generateSubscriptionId;\n    _this.suscriberId = generateSubscriptionId();\n    _this.moreProps = {};\n    _this.state = {\n      updateCount: 0\n    };\n    return _this;\n  }\n\n  _createClass(GenericComponent, [{\n    key: \"updateMoreProps\",\n    value: function updateMoreProps(moreProps) {\n      var _this2 = this;\n\n      Object.keys(moreProps).forEach(function (key) {\n        _this2.moreProps[key] = moreProps[key];\n      });\n    }\n  }, {\n    key: \"shouldTypeProceed\",\n    value: function shouldTypeProceed() {\n      return true;\n    }\n  }, {\n    key: \"preEvaluate\",\n    value: function preEvaluate() {}\n  }, {\n    key: \"listener\",\n    value: function listener(type, moreProps, state, e) {\n      // console.log(e.shiftKey)\n      if (isDefined(moreProps)) {\n        this.updateMoreProps(moreProps);\n      }\n\n      this.evaluationInProgress = true;\n      this.evaluateType(type, e);\n      this.evaluationInProgress = false;\n    }\n  }, {\n    key: \"evaluateType\",\n    value: function evaluateType(type, e) {\n      var newType = aliases[type] || type;\n      var proceed = this.props.drawOn.indexOf(newType) > -1; // console.log(\"type ->\", type, proceed);\n\n      if (!proceed) return; // const moreProps = this.getMoreProps();\n\n      this.preEvaluate(type, this.moreProps, e);\n      if (!this.shouldTypeProceed(type, this.moreProps)) return;\n\n      switch (type) {\n        case \"zoom\":\n        case \"mouseenter\":\n          // DO NOT DRAW FOR THESE EVENTS\n          break;\n\n        case \"mouseleave\":\n          {\n            this.moreProps.hovering = false;\n            var moreProps = this.getMoreProps();\n\n            if (this.props.onUnHover) {\n              this.props.onUnHover(moreProps, e);\n            }\n\n            break;\n          }\n\n        case \"contextmenu\":\n          {\n            if (this.props.onContextMenu) {\n              this.props.onContextMenu(this.getMoreProps(), e);\n            }\n\n            if (this.moreProps.hovering && this.props.onContextMenuWhenHover) {\n              this.props.onContextMenuWhenHover(this.getMoreProps(), e);\n            }\n\n            break;\n          }\n\n        case \"mousedown\":\n          {\n            if (this.props.onMouseDown) {\n              this.props.onMouseDown(this.getMoreProps(), e);\n            }\n\n            break;\n          }\n\n        case \"click\":\n          {\n            var _moreProps = this.getMoreProps();\n\n            if (this.moreProps.hovering) {\n              // console.error(\"TODO use this only for SAR, Line series\")\n              this.props.onClickWhenHover(_moreProps, e);\n            } else {\n              this.props.onClickOutside(_moreProps, e);\n            }\n\n            if (this.props.onClick) {\n              this.props.onClick(_moreProps, e);\n            }\n\n            break;\n          }\n\n        case \"mousemove\":\n          {\n            var prevHover = this.moreProps.hovering;\n            this.moreProps.hovering = this.isHover(e);\n            var _context = this.context,\n                amIOnTop = _context.amIOnTop,\n                setCursorClass = _context.setCursorClass;\n\n            if (this.moreProps.hovering && !this.props.selected\n            /* && !prevHover */\n            && amIOnTop(this.suscriberId) && isDefined(this.props.onHover)) {\n              setCursorClass(\"react-stockcharts-pointer-cursor\");\n              this.iSetTheCursorClass = true;\n            } else if (this.moreProps.hovering && this.props.selected && amIOnTop(this.suscriberId)) {\n              setCursorClass(this.props.interactiveCursorClass);\n              this.iSetTheCursorClass = true;\n            } else if (prevHover && !this.moreProps.hovering && this.iSetTheCursorClass) {\n              this.iSetTheCursorClass = false;\n              setCursorClass(null);\n            }\n\n            var _moreProps2 = this.getMoreProps();\n\n            if (this.moreProps.hovering && !prevHover) {\n              if (this.props.onHover) {\n                this.props.onHover(_moreProps2, e);\n              }\n            }\n\n            if (prevHover && !this.moreProps.hovering) {\n              if (this.props.onUnHover) {\n                this.props.onUnHover(_moreProps2, e);\n              }\n            }\n\n            if (this.props.onMouseMove) {\n              this.props.onMouseMove(_moreProps2, e);\n            }\n\n            break;\n          }\n\n        case \"dblclick\":\n          {\n            var _moreProps3 = this.getMoreProps();\n\n            if (this.props.onDoubleClick) {\n              this.props.onDoubleClick(_moreProps3, e);\n            }\n\n            if (this.moreProps.hovering && this.props.onDoubleClickWhenHover) {\n              this.props.onDoubleClickWhenHover(_moreProps3, e);\n            }\n\n            break;\n          }\n\n        case \"pan\":\n          {\n            this.moreProps.hovering = false;\n\n            if (this.props.onPan) {\n              this.props.onPan(this.getMoreProps(), e);\n            }\n\n            break;\n          }\n\n        case \"panend\":\n          {\n            if (this.props.onPanEnd) {\n              this.props.onPanEnd(this.getMoreProps(), e);\n            }\n\n            break;\n          }\n\n        case \"dragstart\":\n          {\n            if (this.getPanConditions().draggable) {\n              var _amIOnTop = this.context.amIOnTop;\n\n              if (_amIOnTop(this.suscriberId)) {\n                this.dragInProgress = true;\n                this.props.onDragStart(this.getMoreProps(), e);\n              }\n            }\n\n            this.someDragInProgress = true;\n            break;\n          }\n\n        case \"drag\":\n          {\n            if (this.dragInProgress && this.props.onDrag) {\n              this.props.onDrag(this.getMoreProps(), e);\n            }\n\n            break;\n          }\n\n        case \"dragend\":\n          {\n            if (this.dragInProgress && this.props.onDragComplete) {\n              this.props.onDragComplete(this.getMoreProps(), e);\n            }\n\n            this.dragInProgress = false;\n            this.someDragInProgress = false;\n            break;\n          }\n\n        case \"dragcancel\":\n          {\n            if (this.dragInProgress || this.iSetTheCursorClass) {\n              var _setCursorClass = this.context.setCursorClass;\n\n              _setCursorClass(null);\n            }\n\n            break;\n          }\n      }\n    }\n  }, {\n    key: \"isHover\",\n    value: function isHover(e) {\n      return isDefined(this.props.isHover) ? this.props.isHover(this.getMoreProps(), e) : false;\n    }\n  }, {\n    key: \"getPanConditions\",\n    value: function getPanConditions() {\n      var draggable = !!(this.props.selected && this.moreProps.hovering) || this.props.enableDragOnHover && this.moreProps.hovering;\n      return {\n        draggable: draggable,\n        panEnabled: !this.props.disablePan\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        force: false\n      },\n          trigger = _ref.trigger,\n          force = _ref.force;\n\n      var type = aliases[trigger] || trigger;\n      var proceed = this.props.drawOn.indexOf(type) > -1;\n\n      if (proceed || this.props.selected\n      /* this is to draw as soon as you select */\n      || force) {\n        var chartCanvasType = this.context.chartCanvasType;\n        var canvasDraw = this.props.canvasDraw;\n\n        if (isNotDefined(canvasDraw) || chartCanvasType === \"svg\") {\n          var updateCount = this.state.updateCount;\n          this.setState({\n            updateCount: updateCount + 1\n          });\n        } else {\n          this.drawOnCanvas();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _context2 = this.context,\n          subscribe = _context2.subscribe,\n          chartId = _context2.chartId;\n      var _props = this.props,\n          clip = _props.clip,\n          edgeClip = _props.edgeClip;\n      subscribe(this.suscriberId, {\n        chartId: chartId,\n        clip: clip,\n        edgeClip: edgeClip,\n        listener: this.listener,\n        draw: this.draw,\n        getPanConditions: this.getPanConditions\n      });\n      this.componentWillReceiveProps(this.props, this.context);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var unsubscribe = this.context.unsubscribe;\n      unsubscribe(this.suscriberId);\n\n      if (this.iSetTheCursorClass) {\n        var setCursorClass = this.context.setCursorClass;\n        setCursorClass(null);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidUpdate(this.props);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var chartCanvasType = this.context.chartCanvasType;\n      var _props2 = this.props,\n          canvasDraw = _props2.canvasDraw,\n          selected = _props2.selected,\n          interactiveCursorClass = _props2.interactiveCursorClass;\n\n      if (prevProps.selected !== selected) {\n        var setCursorClass = this.context.setCursorClass;\n\n        if (selected && this.moreProps.hovering) {\n          this.iSetTheCursorClass = true;\n          setCursorClass(interactiveCursorClass);\n        } else {\n          this.iSetTheCursorClass = false;\n          setCursorClass(null);\n        }\n      }\n\n      if (isDefined(canvasDraw) && !this.evaluationInProgress // && !(this.someDragInProgress && this.props.selected)\n\n      /*\n      prevent double draw of interactive elements\n      during dragging / hover / click etc.\n      */\n      && chartCanvasType !== \"svg\") {\n        this.updateMoreProps(this.moreProps);\n        this.drawOnCanvas();\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var xScale = nextContext.xScale,\n          plotData = nextContext.plotData,\n          chartConfig = nextContext.chartConfig,\n          getMutableState = nextContext.getMutableState;\n      this.props.debug(nextContext);\n      this.moreProps = _extends({}, this.moreProps, getMutableState(), {\n        /*\n        ^ this is so\n        mouseXY, currentCharts, currentItem are available to\n        newly created components like MouseHoverText which\n        is created right after a new interactive object is drawn\n        */\n        xScale: xScale,\n        plotData: plotData,\n        chartConfig: chartConfig\n      });\n    }\n  }, {\n    key: \"getMoreProps\",\n    value: function getMoreProps() {\n      var _context3 = this.context,\n          xScale = _context3.xScale,\n          plotData = _context3.plotData,\n          chartConfig = _context3.chartConfig,\n          morePropsDecorator = _context3.morePropsDecorator,\n          xAccessor = _context3.xAccessor,\n          displayXAccessor = _context3.displayXAccessor,\n          width = _context3.width,\n          height = _context3.height;\n      var _context4 = this.context,\n          chartId = _context4.chartId,\n          fullData = _context4.fullData;\n\n      var moreProps = _extends({\n        xScale: xScale,\n        plotData: plotData,\n        chartConfig: chartConfig,\n        xAccessor: xAccessor,\n        displayXAccessor: displayXAccessor,\n        width: width,\n        height: height,\n        chartId: chartId,\n        fullData: fullData\n      }, this.moreProps);\n\n      return (morePropsDecorator || identity)(moreProps);\n    }\n  }, {\n    key: \"preCanvasDraw\",\n    value: function preCanvasDraw() {// do nothing\n    }\n  }, {\n    key: \"postCanvasDraw\",\n    value: function postCanvasDraw() {}\n  }, {\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas() {\n      var _props3 = this.props,\n          canvasDraw = _props3.canvasDraw,\n          canvasToDraw = _props3.canvasToDraw;\n      var getCanvasContexts = this.context.getCanvasContexts;\n      var moreProps = this.getMoreProps();\n      var ctx = canvasToDraw(getCanvasContexts());\n      this.preCanvasDraw(ctx, moreProps);\n      canvasDraw(ctx, moreProps);\n      this.postCanvasDraw(ctx, moreProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _context5 = this.context,\n          chartCanvasType = _context5.chartCanvasType,\n          chartId = _context5.chartId;\n      var _props4 = this.props,\n          canvasDraw = _props4.canvasDraw,\n          clip = _props4.clip,\n          svgDraw = _props4.svgDraw;\n\n      if (isDefined(canvasDraw) && chartCanvasType !== \"svg\") {\n        return null;\n      }\n\n      var suffix = isDefined(chartId) ? \"-\" + chartId : \"\";\n      var style = clip ? {\n        \"clipPath\": \"url(#chart-area-clip\" + suffix + \")\"\n      } : null;\n      return React.createElement(\"g\", {\n        style: style\n      }, svgDraw(this.getMoreProps()));\n    }\n  }]);\n\n  return GenericComponent;\n}(Component);\n\nGenericComponent.propTypes = {\n  svgDraw: PropTypes.func.isRequired,\n  canvasDraw: PropTypes.func,\n  drawOn: PropTypes.array.isRequired,\n  clip: PropTypes.bool.isRequired,\n  edgeClip: PropTypes.bool.isRequired,\n  interactiveCursorClass: PropTypes.string,\n  selected: PropTypes.bool.isRequired,\n  enableDragOnHover: PropTypes.bool.isRequired,\n  disablePan: PropTypes.bool.isRequired,\n  canvasToDraw: PropTypes.func.isRequired,\n  isHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onClickWhenHover: PropTypes.func,\n  onClickOutside: PropTypes.func,\n  onPan: PropTypes.func,\n  onPanEnd: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDrag: PropTypes.func,\n  onDragComplete: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onDoubleClickWhenHover: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onContextMenuWhenHover: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onHover: PropTypes.func,\n  onUnHover: PropTypes.func,\n  debug: PropTypes.func // owner: PropTypes.string.isRequired,\n\n};\nGenericComponent.defaultProps = {\n  svgDraw: functor(null),\n  draw: [],\n  canvasToDraw: function canvasToDraw(contexts) {\n    return contexts.mouseCoord;\n  },\n  clip: true,\n  edgeClip: false,\n  selected: false,\n  disablePan: false,\n  enableDragOnHover: false,\n  onClickWhenHover: noop,\n  onClickOutside: noop,\n  onDragStart: noop,\n  onMouseMove: noop,\n  onMouseDown: noop,\n  debug: noop\n};\nGenericComponent.contextTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  margin: PropTypes.object.isRequired,\n  chartId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  getCanvasContexts: PropTypes.func,\n  chartCanvasType: PropTypes.string,\n  xScale: PropTypes.func.isRequired,\n  xAccessor: PropTypes.func.isRequired,\n  displayXAccessor: PropTypes.func.isRequired,\n  plotData: PropTypes.array.isRequired,\n  fullData: PropTypes.array.isRequired,\n  chartConfig: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\n  morePropsDecorator: PropTypes.func,\n  generateSubscriptionId: PropTypes.func,\n  getMutableState: PropTypes.func.isRequired,\n  amIOnTop: PropTypes.func.isRequired,\n  subscribe: PropTypes.func.isRequired,\n  unsubscribe: PropTypes.func.isRequired,\n  setCursorClass: PropTypes.func.isRequired\n};\nexport default GenericComponent;\nexport function getAxisCanvas(contexts) {\n  return contexts.axes;\n}\nexport function getMouseCanvas(contexts) {\n  return contexts.mouseCoord;\n}","map":null,"metadata":{},"sourceType":"module"}