{"ast":null,"code":"import _regeneratorRuntime from \"/home/pmaheshwari/Desktop/TowardsStartUp/MunWorld/cleanui-admin-template-react-cra/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/home/pmaheshwari/Desktop/TowardsStartUp/MunWorld/cleanui-admin-template-react-cra/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(CHANGE_SETTING),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(SETUP),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, put } from 'redux-saga/effects';\nimport store from 'store';\nimport qs from 'qs';\nimport { history, store as reduxStore } from 'index';\nimport actions from './actions';\nexport function CHANGE_SETTING(_ref) {\n  var _ref$payload, setting, value;\n\n  return _regeneratorRuntime.wrap(function CHANGE_SETTING$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref$payload = _ref.payload, setting = _ref$payload.setting, value = _ref$payload.value;\n          _context.next = 3;\n          return store.set(\"app.settings.\".concat(setting), value);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'settings/SET_STATE',\n            payload: _defineProperty({}, setting, value)\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function SETUP() {\n  var changeSettings, isMobileView;\n  return _regeneratorRuntime.wrap(function SETUP$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          // load settings from url on app load\n          changeSettings = function changeSettings(search) {\n            var query = qs.parse(search, {\n              ignoreQueryPrefix: true\n            });\n            Object.keys(query).forEach(function (key) {\n              reduxStore.dispatch({\n                type: 'settings/CHANGE_SETTING',\n                payload: {\n                  setting: key,\n                  value: query[key] === 'true'\n                }\n              });\n            });\n          };\n\n          _context2.next = 3;\n          return changeSettings(history.location.search);\n\n        case 3:\n          _context2.next = 5;\n          return history.listen(function (params) {\n            var search = params.search;\n            changeSettings(search);\n          });\n\n        case 5:\n          // detect isMobileView setting on app load and window resize\n          isMobileView = function isMobileView() {\n            var load = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            var currentState = global.window.innerWidth < 768;\n            var prevState = store.get('app.settings.isMobileView');\n\n            if (currentState !== prevState || load) {\n              reduxStore.dispatch({\n                type: 'settings/CHANGE_SETTING',\n                payload: {\n                  setting: 'isMobileView',\n                  value: currentState\n                }\n              });\n            }\n          };\n\n          _context2.next = 8;\n          return isMobileView(true);\n\n        case 8:\n          _context2.next = 10;\n          return window.addEventListener('resize', function () {\n            isMobileView();\n          });\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(actions.CHANGE_SETTING, CHANGE_SETTING), SETUP() // run once on app load to init listeners\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/home/pmaheshwari/Desktop/TowardsStartUp/MunWorld/cleanui-admin-template-react-cra/src/redux/settings/sagas.js"],"names":["CHANGE_SETTING","SETUP","rootSaga","all","takeEvery","put","store","qs","history","reduxStore","actions","payload","setting","value","set","type","changeSettings","search","query","parse","ignoreQueryPrefix","Object","keys","forEach","key","dispatch","location","listen","params","isMobileView","load","currentState","global","window","innerWidth","prevState","get","addEventListener"],"mappings":"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","sourcesContent":["import { all, takeEvery, put } from 'redux-saga/effects'\nimport store from 'store'\nimport qs from 'qs'\nimport { history, store as reduxStore } from 'index'\nimport actions from './actions'\n\nexport function* CHANGE_SETTING({ payload: { setting, value } }) {\n  yield store.set(`app.settings.${setting}`, value)\n  yield put({\n    type: 'settings/SET_STATE',\n    payload: {\n      [setting]: value,\n    },\n  })\n}\n\nexport function* SETUP() {\n  // load settings from url on app load\n  const changeSettings = search => {\n    const query = qs.parse(search, { ignoreQueryPrefix: true })\n    Object.keys(query).forEach(key => {\n      reduxStore.dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting: key,\n          value: query[key] === 'true',\n        },\n      })\n    })\n  }\n  yield changeSettings(history.location.search)\n  yield history.listen(params => {\n    const { search } = params\n    changeSettings(search)\n  })\n\n  // detect isMobileView setting on app load and window resize\n  const isMobileView = (load = false) => {\n    const currentState = global.window.innerWidth < 768\n    const prevState = store.get('app.settings.isMobileView')\n    if (currentState !== prevState || load) {\n      reduxStore.dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting: 'isMobileView',\n          value: currentState,\n        },\n      })\n    }\n  }\n  yield isMobileView(true)\n  yield window.addEventListener('resize', () => {\n    isMobileView()\n  })\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(actions.CHANGE_SETTING, CHANGE_SETTING),\n    SETUP(), // run once on app load to init listeners\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}