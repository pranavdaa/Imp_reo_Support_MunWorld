{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.default = function () {\n  var options = _defaultOptionsForComputation.Change;\n\n  function calculator(data) {\n    var _options = options,\n        basePath = _options.basePath,\n        mainKeys = _options.mainKeys,\n        compareKeys = _options.compareKeys;\n    var base = (0, _utils.path)(basePath);\n    var first = (0, _utils.head)(data);\n    var b = base(first); // eslint-disable-next-line prefer-const\n\n    var firsts = {};\n    var compareData = data.map(function (d) {\n      // eslint-disable-next-line prefer-const\n      var result = {};\n      mainKeys.forEach(function (key) {\n        if (_typeof(d[key]) === \"object\") {\n          result[key] = {};\n          Object.keys(d[key]).forEach(function (subkey) {\n            result[key][subkey] = (d[key][subkey] - b) / b;\n          });\n        } else {\n          result[key] = (d[key] - b) / b;\n        }\n      });\n      compareKeys.forEach(function (key) {\n        if ((0, _utils.isDefined)(d[key]) && (0, _utils.isNotDefined)(firsts[key])) {\n          firsts[key] = d[key];\n        }\n\n        if ((0, _utils.isDefined)(d[key]) && (0, _utils.isDefined)(firsts[key])) {\n          result[key] = (d[key] - firsts[key]) / firsts[key];\n        }\n      });\n      return result;\n    }); // console.log(compareData[20]);\n\n    return compareData;\n  }\n\n  calculator.options = function (x) {\n    if (!arguments.length) {\n      return options;\n    }\n\n    options = _extends({}, _defaultOptionsForComputation.Change, x);\n    return calculator;\n  };\n\n  return calculator;\n};\n\nvar _utils = require(\"../utils\");\n\nvar _defaultOptionsForComputation = require(\"./defaultOptionsForComputation\");","map":null,"metadata":{},"sourceType":"script"}