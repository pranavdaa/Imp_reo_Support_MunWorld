{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.renderSVG = renderSVG;\nexports.drawOnCanvas = drawOnCanvas;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint-disable react/prop-types */\n\n\nfunction renderSVG(props) {\n  var className = props.className;\n  var edge = helper(props);\n  if (edge === null) return null;\n  var line = void 0,\n      coordinateBase = void 0,\n      coordinate = void 0;\n\n  if ((0, _utils.isDefined)(edge.line)) {\n    line = _react2.default.createElement(\"line\", {\n      className: \"react-stockcharts-cross-hair\",\n      strokeOpacity: edge.line.opacity,\n      stroke: edge.line.stroke,\n      strokeDasharray: (0, _utils.getStrokeDasharray)(edge.line.strokeDasharray),\n      x1: edge.line.x1,\n      y1: edge.line.y1,\n      x2: edge.line.x2,\n      y2: edge.line.y2\n    });\n  }\n\n  if ((0, _utils.isDefined)(edge.coordinateBase)) {\n    var _edge$coordinateBase = edge.coordinateBase,\n        rectWidth = _edge$coordinateBase.rectWidth,\n        rectHeight = _edge$coordinateBase.rectHeight,\n        arrowWidth = _edge$coordinateBase.arrowWidth;\n    var path = edge.orient === \"left\" ? \"M0,0L0,\" + rectHeight + \"L\" + rectWidth + \",\" + rectHeight + \"L\" + (rectWidth + arrowWidth) + \",10L\" + rectWidth + \",0L0,0L0,0\" : \"M0,\" + arrowWidth + \"L\" + arrowWidth + \",\" + rectHeight + \"L\" + (rectWidth + arrowWidth) + \",\" + rectHeight + \"L\" + (rectWidth + arrowWidth) + \",0L\" + arrowWidth + \",0L0,\" + arrowWidth;\n    coordinateBase = edge.orient === \"left\" || edge.orient === \"right\" ? _react2.default.createElement(\"g\", {\n      key: 1,\n      transform: \"translate(\" + edge.coordinateBase.edgeXRect + \",\" + edge.coordinateBase.edgeYRect + \")\"\n    }, _react2.default.createElement(\"path\", {\n      d: path,\n      className: \"react-stockchart-text-background\",\n      height: rectHeight,\n      width: rectWidth,\n      stroke: edge.coordinateBase.stroke,\n      strokeLinejoin: \"miter\",\n      strokeOpacity: edge.coordinateBase.strokeOpacity,\n      strokeWidth: edge.coordinateBase.strokeWidth,\n      fill: edge.coordinateBase.fill,\n      fillOpacity: edge.coordinateBase.opacity\n    })) : _react2.default.createElement(\"rect\", {\n      key: 1,\n      className: \"react-stockchart-text-background\",\n      x: edge.coordinateBase.edgeXRect,\n      y: edge.coordinateBase.edgeYRect,\n      height: rectHeight,\n      width: rectWidth,\n      fill: edge.coordinateBase.fill,\n      opacity: edge.coordinateBase.opacity\n    });\n    coordinate = _react2.default.createElement(\"text\", {\n      key: 2,\n      x: edge.coordinate.edgeXText,\n      y: edge.coordinate.edgeYText,\n      textAnchor: edge.coordinate.textAnchor,\n      fontFamily: edge.coordinate.fontFamily,\n      fontSize: edge.coordinate.fontSize,\n      dy: \".32em\",\n      fill: edge.coordinate.textFill\n    }, edge.coordinate.displayCoordinate);\n  }\n\n  return _react2.default.createElement(\"g\", {\n    className: className\n  }, line, coordinateBase, coordinate);\n}\n/* eslint-enable react/prop-types */\n\n\nfunction helper(props) {\n  var displayCoordinate = props.coordinate,\n      show = props.show,\n      type = props.type,\n      orient = props.orient,\n      edgeAt = props.edgeAt,\n      hideLine = props.hideLine,\n      lineStrokeDasharray = props.lineStrokeDasharray;\n  var fill = props.fill,\n      opacity = props.opacity,\n      fontFamily = props.fontFamily,\n      fontSize = props.fontSize,\n      textFill = props.textFill,\n      lineStroke = props.lineStroke,\n      lineOpacity = props.lineOpacity;\n  var stroke = props.stroke,\n      strokeOpacity = props.strokeOpacity,\n      strokeWidth = props.strokeWidth;\n  var arrowWidth = props.arrowWidth,\n      rectWidth = props.rectWidth,\n      rectHeight = props.rectHeight,\n      rectRadius = props.rectRadius;\n  var x1 = props.x1,\n      y1 = props.y1,\n      x2 = props.x2,\n      y2 = props.y2,\n      dx = props.dx;\n  if (!show) return null;\n  var coordinateBase = void 0,\n      coordinate = void 0;\n\n  if ((0, _utils.isDefined)(displayCoordinate)) {\n    var textAnchor = \"middle\"; // TODO: Below it is necessary to implement logic for the possibility of alignment from the right or from the left.\n\n    var edgeXRect = void 0,\n        edgeYRect = void 0,\n        edgeXText = void 0,\n        edgeYText = void 0;\n\n    if (type === \"horizontal\") {\n      edgeXRect = dx + (orient === \"right\" ? edgeAt + 1 : edgeAt - rectWidth - 1);\n      edgeYRect = y1 - rectHeight / 2 - strokeWidth;\n      edgeXText = dx + (orient === \"right\" ? edgeAt + rectWidth / 2 : edgeAt - rectWidth / 2);\n      edgeYText = y1;\n    } else {\n      var dy = orient === \"bottom\" ? strokeWidth - 1 : -strokeWidth + 1;\n      edgeXRect = x1 - rectWidth / 2;\n      edgeYRect = (orient === \"bottom\" ? edgeAt : edgeAt - rectHeight) + dy;\n      edgeXText = x1;\n      edgeYText = (orient === \"bottom\" ? edgeAt + rectHeight / 2 : edgeAt - rectHeight / 2) + dy;\n    }\n\n    coordinateBase = {\n      edgeXRect: edgeXRect,\n      edgeYRect: edgeYRect,\n      rectHeight: rectHeight + strokeWidth,\n      rectWidth: rectWidth,\n      rectRadius: rectRadius,\n      fill: fill,\n      opacity: opacity,\n      arrowWidth: arrowWidth,\n      stroke: stroke,\n      strokeOpacity: strokeOpacity,\n      strokeWidth: strokeWidth\n    };\n    coordinate = {\n      edgeXText: edgeXText,\n      edgeYText: edgeYText,\n      textAnchor: textAnchor,\n      fontFamily: fontFamily,\n      fontSize: fontSize,\n      textFill: textFill,\n      displayCoordinate: displayCoordinate\n    };\n  }\n\n  var line = hideLine ? undefined : {\n    opacity: lineOpacity,\n    stroke: lineStroke,\n    strokeDasharray: lineStrokeDasharray,\n    x1: x1,\n    y1: y1,\n    x2: x2,\n    y2: y2\n  };\n  return {\n    coordinateBase: coordinateBase,\n    coordinate: coordinate,\n    line: line,\n    orient: orient\n  };\n}\n\nfunction drawOnCanvas(ctx, props) {\n  var fontSize = props.fontSize,\n      fontFamily = props.fontFamily;\n  ctx.font = fontSize + \"px \" + fontFamily;\n  ctx.textBaseline = \"middle\";\n  var width = Math.round(ctx.measureText(props.coordinate).width + 10);\n  var edge = helper(_extends({}, props, {\n    rectWidth: width\n  }));\n  if (edge === null) return;\n\n  if ((0, _utils.isDefined)(edge.line)) {\n    var dashArray = (0, _utils.getStrokeDasharray)(edge.line.strokeDasharray).split(\",\").map(function (d) {\n      return +d;\n    });\n    ctx.setLineDash(dashArray);\n    ctx.strokeStyle = (0, _utils.hexToRGBA)(edge.line.stroke, edge.line.opacity);\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.moveTo(edge.line.x1, edge.line.y1);\n    ctx.lineTo(edge.line.x2, edge.line.y2);\n    ctx.stroke();\n  }\n\n  ctx.setLineDash([]);\n\n  if ((0, _utils.isDefined)(edge.coordinateBase)) {\n    var _edge$coordinateBase2 = edge.coordinateBase,\n        rectWidth = _edge$coordinateBase2.rectWidth,\n        rectHeight = _edge$coordinateBase2.rectHeight,\n        rectRadius = _edge$coordinateBase2.rectRadius,\n        arrowWidth = _edge$coordinateBase2.arrowWidth;\n    ctx.fillStyle = (0, _utils.hexToRGBA)(edge.coordinateBase.fill, edge.coordinateBase.opacity);\n\n    if ((0, _utils.isDefined)(edge.coordinateBase.stroke)) {\n      ctx.strokeStyle = (0, _utils.hexToRGBA)(edge.coordinateBase.stroke, edge.coordinateBase.strokeOpacity);\n      ctx.lineWidth = edge.coordinateBase.strokeWidth;\n    }\n\n    var x = edge.coordinateBase.edgeXRect;\n    var y = edge.coordinateBase.edgeYRect;\n    var halfHeight = rectHeight / 2;\n    ctx.beginPath();\n\n    if (edge.orient === \"right\") {\n      x -= arrowWidth;\n      ctx.moveTo(x, y + halfHeight);\n      ctx.lineTo(x + arrowWidth, y);\n      ctx.lineTo(x + rectWidth + arrowWidth, y);\n      ctx.lineTo(x + rectWidth + arrowWidth, y + rectHeight);\n      ctx.lineTo(x + arrowWidth, y + rectHeight);\n      ctx.closePath();\n    } else if (edge.orient === \"left\") {\n      // x += arrowWidth;\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + rectWidth, y);\n      ctx.lineTo(x + rectWidth + arrowWidth, y + halfHeight);\n      ctx.lineTo(x + rectWidth, y + rectHeight);\n      ctx.lineTo(x, y + rectHeight);\n      ctx.closePath();\n    } else {\n      // console.error(x, y, rectWidth, rectHeight)\n      if (rectRadius) {\n        roundRect(ctx, x, y, rectWidth, rectHeight, 3);\n      } else {\n        ctx.rect(x, y, rectWidth, rectHeight);\n      }\n    }\n\n    ctx.fill();\n\n    if ((0, _utils.isDefined)(edge.coordinateBase.stroke)) {\n      ctx.stroke();\n    }\n\n    ctx.fillStyle = edge.coordinate.textFill;\n    ctx.textAlign = edge.coordinate.textAnchor === \"middle\" ? \"center\" : edge.coordinate.textAnchor;\n    ctx.fillText(edge.coordinate.displayCoordinate, edge.coordinate.edgeXText, edge.coordinate.edgeYText);\n  }\n}\n\nfunction roundRect(ctx, x, y, width, height, radius) {\n  ctx.beginPath();\n  ctx.moveTo(x + radius, y);\n  ctx.lineTo(x + width - radius, y);\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n  ctx.lineTo(x + width, y + height - radius);\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n  ctx.lineTo(x + radius, y + height);\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n  ctx.lineTo(x, y + radius);\n  ctx.quadraticCurveTo(x, y, x + radius, y);\n  ctx.closePath();\n} // export default EdgeCoordinate;","map":null,"metadata":{},"sourceType":"script"}