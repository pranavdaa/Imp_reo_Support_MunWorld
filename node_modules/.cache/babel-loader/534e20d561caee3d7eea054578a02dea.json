{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.default = fitWidth;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // import ReactDOM from \"react-dom\";\n\n\nfunction getDisplayName(Series) {\n  var name = Series.displayName || Series.name || \"Series\";\n  return name;\n}\n\nfunction fitWidth(WrappedComponent) {\n  var withRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var minWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n\n  var ResponsiveComponent = function (_Component) {\n    _inherits(ResponsiveComponent, _Component);\n\n    function ResponsiveComponent(props) {\n      _classCallCheck(this, ResponsiveComponent);\n\n      var _this = _possibleConstructorReturn(this, (ResponsiveComponent.__proto__ || Object.getPrototypeOf(ResponsiveComponent)).call(this, props));\n\n      _this.handleWindowResize = _this.handleWindowResize.bind(_this);\n      _this.getWrappedInstance = _this.getWrappedInstance.bind(_this);\n      _this.saveNode = _this.saveNode.bind(_this);\n      _this.setTestCanvas = _this.setTestCanvas.bind(_this);\n      _this.state = {};\n      return _this;\n    }\n\n    _createClass(ResponsiveComponent, [{\n      key: \"saveNode\",\n      value: function saveNode(node) {\n        this.node = node;\n      }\n    }, {\n      key: \"setTestCanvas\",\n      value: function setTestCanvas(node) {\n        this.testCanvas = node;\n      }\n    }, {\n      key: \"getRatio\",\n      value: function getRatio() {\n        if ((0, _utils.isDefined)(this.testCanvas)) {\n          var context = this.testCanvas.getContext(\"2d\");\n          var devicePixelRatio = window.devicePixelRatio || 1;\n          var backingStoreRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n          var ratio = devicePixelRatio / backingStoreRatio; // console.log(\"ratio = \", ratio);\n\n          return ratio;\n        }\n\n        return 1;\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        window.addEventListener(\"resize\", this.handleWindowResize);\n        this.handleWindowResize();\n        /* eslint-disable react/no-did-mount-set-state */\n\n        this.setState({\n          ratio: this.getRatio()\n        });\n        /* eslint-enable react/no-did-mount-set-state */\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.handleWindowResize);\n      }\n    }, {\n      key: \"handleWindowResize\",\n      value: function handleWindowResize() {\n        var _this2 = this;\n\n        this.setState({\n          width: 0\n        }, function () {\n          var el = _this2.node;\n\n          var _window$getComputedSt = window.getComputedStyle(el.parentNode),\n              width = _window$getComputedSt.width,\n              paddingLeft = _window$getComputedSt.paddingLeft,\n              paddingRight = _window$getComputedSt.paddingRight;\n\n          var w = parseFloat(width) - (parseFloat(paddingLeft) + parseFloat(paddingRight));\n\n          _this2.setState({\n            width: Math.round(Math.max(w, minWidth))\n          });\n        });\n      }\n    }, {\n      key: \"getWrappedInstance\",\n      value: function getWrappedInstance() {\n        return this.node;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var ref = withRef ? {\n          ref: this.saveNode\n        } : {};\n\n        if (this.state.width) {\n          return _react2.default.createElement(WrappedComponent, _extends({\n            width: this.state.width,\n            ratio: this.state.ratio\n          }, this.props, ref));\n        } else {\n          return _react2.default.createElement(\"div\", ref, _react2.default.createElement(\"canvas\", {\n            ref: this.setTestCanvas\n          }));\n        }\n      }\n    }]);\n\n    return ResponsiveComponent;\n  }(_react.Component);\n\n  ResponsiveComponent.displayName = \"fitWidth(\" + getDisplayName(WrappedComponent) + \")\";\n  return ResponsiveComponent;\n}","map":null,"metadata":{},"sourceType":"script"}