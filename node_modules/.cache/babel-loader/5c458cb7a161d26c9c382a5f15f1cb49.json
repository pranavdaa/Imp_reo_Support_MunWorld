{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _GenericChartComponent = require(\"../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _GenericComponent = require(\"../GenericComponent\");\n\nvar _StackedBarSeries = require(\"./StackedBarSeries\");\n\nvar _StackedBarSeries2 = _interopRequireDefault(_StackedBarSeries);\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar BarSeries = function (_Component) {\n  _inherits(BarSeries, _Component);\n\n  function BarSeries(props) {\n    _classCallCheck(this, BarSeries);\n\n    var _this = _possibleConstructorReturn(this, (BarSeries.__proto__ || Object.getPrototypeOf(BarSeries)).call(this, props));\n\n    _this.renderSVG = _this.renderSVG.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    return _this;\n  }\n\n  _createClass(BarSeries, [{\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      if (this.props.swapScales) {\n        var xAccessor = moreProps.xAccessor;\n        (0, _StackedBarSeries.drawOnCanvasHelper)(ctx, this.props, moreProps, xAccessor, _StackedBarSeries.identityStack);\n      } else {\n        var bars = getBars(this.props, moreProps);\n        (0, _StackedBarSeries.drawOnCanvas2)(this.props, ctx, bars);\n      }\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG(moreProps) {\n      if (this.props.swapScales) {\n        var xAccessor = moreProps.xAccessor;\n        return _react2.default.createElement(\"g\", null, (0, _StackedBarSeries.svgHelper)(this.props, moreProps, xAccessor, _StackedBarSeries.identityStack));\n      } else {\n        var bars = getBars(this.props, moreProps);\n        return _react2.default.createElement(\"g\", null, (0, _StackedBarSeries.getBarsSVG2)(this.props, bars));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var clip = this.props.clip;\n      return _react2.default.createElement(_GenericChartComponent2.default, {\n        clip: clip,\n        svgDraw: this.renderSVG,\n        canvasToDraw: _GenericComponent.getAxisCanvas,\n        canvasDraw: this.drawOnCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return BarSeries;\n}(_react.Component);\n\nBarSeries.propTypes = {\n  baseAt: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.func]),\n  stroke: _propTypes2.default.bool,\n  width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.func]),\n  yAccessor: _propTypes2.default.func.isRequired,\n  opacity: _propTypes2.default.number,\n  fill: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),\n  className: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),\n  clip: _propTypes2.default.bool,\n  swapScales: _propTypes2.default.bool\n};\nBarSeries.defaultProps = _StackedBarSeries2.default.defaultProps;\nexports.default = BarSeries;\n/*\n Initially, this program was using StackedBarSeries.getBars\n to benefit from code reuse and having a single place that\n contains the logic for drawing all types of bar charts\n simple, grouped, horizontal, but turnes out\n making it highly cuztimizable also made it slow for the\n most simple case, a regular bar chart.\n This function contains just the necessary logic\n to create bars\n*/\n\nfunction getBars(props, moreProps) {\n  var baseAt = props.baseAt,\n      fill = props.fill,\n      stroke = props.stroke,\n      yAccessor = props.yAccessor;\n  var xScale = moreProps.xScale,\n      xAccessor = moreProps.xAccessor,\n      plotData = moreProps.plotData,\n      yScale = moreProps.chartConfig.yScale;\n  var getFill = (0, _utils.functor)(fill);\n  var getBase = (0, _utils.functor)(baseAt);\n  var widthFunctor = (0, _utils.functor)(props.width);\n  var width = widthFunctor(props, {\n    xScale: xScale,\n    xAccessor: xAccessor,\n    plotData: plotData\n  });\n  /*\n  const barWidth = Math.round(width);\n  const offset = Math.round(barWidth === 1 ? 0 : 0.5 * barWidth);\n  */\n\n  var offset = Math.floor(0.5 * width);\n  var bars = plotData.filter(function (d) {\n    return (0, _utils.isDefined)(yAccessor(d));\n  }).map(function (d) {\n    var yValue = yAccessor(d);\n    var y = yScale(yValue);\n    var x = Math.round(xScale(xAccessor(d))) - offset;\n    var h = getBase(xScale, yScale, d) - yScale(yValue);\n\n    if (h < 0) {\n      y = y + h;\n      h = -h;\n    }\n\n    return {\n      // type: \"line\"\n      x: x,\n      y: Math.round(y),\n      height: Math.round(h),\n      width: offset * 2,\n      fill: getFill(d, 0),\n      stroke: stroke ? getFill(d, 0) : \"none\"\n    };\n  });\n  return bars;\n}","map":null,"metadata":{},"sourceType":"script"}