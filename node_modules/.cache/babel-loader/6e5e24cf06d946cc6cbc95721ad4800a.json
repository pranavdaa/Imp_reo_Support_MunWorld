{"ast":null,"code":"import _classCallCheck from \"/home/pmaheshwari/Desktop/TowardsStartUp/MunWorld/cleanui-admin-template-react-cra/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pmaheshwari/Desktop/TowardsStartUp/MunWorld/cleanui-admin-template-react-cra/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pmaheshwari/Desktop/TowardsStartUp/MunWorld/cleanui-admin-template-react-cra/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pmaheshwari/Desktop/TowardsStartUp/MunWorld/cleanui-admin-template-react-cra/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/pmaheshwari/Desktop/TowardsStartUp/MunWorld/cleanui-admin-template-react-cra/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/pmaheshwari/Desktop/TowardsStartUp/MunWorld/cleanui-admin-template-react-cra/src/pages/dashboard/crypto/register/CountDown/index.js\";\nimport React from 'react';\nimport './index.css';\n\nvar CountDown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CountDown, _React$Component);\n\n  function CountDown() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CountDown);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CountDown)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      remaining: {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0\n      },\n      isExpired: false\n    };\n\n    _this.setDate = function () {\n      var _this$props = _this.props,\n          targetDate = _this$props.targetDate,\n          targetTime = _this$props.targetTime,\n          now = new Date().getTime(),\n          countDownDate = new Date(targetDate + \" \" + targetTime).getTime(); // Find the distance between now and the count down date\n\n      _this.distance = countDownDate - now; // target date and time is less than current date and time\n\n      if (_this.distance < 0) {\n        clearInterval(_this.timer);\n\n        _this.setState({\n          isExpired: true\n        });\n      } else {\n        _this.setState({\n          remaining: {\n            days: Math.floor(_this.distance / (1000 * 60 * 60 * 24)),\n            hours: Math.floor(_this.distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n            minutes: Math.floor(_this.distance % (1000 * 60 * 60) / (1000 * 60)),\n            seconds: Math.floor(_this.distance % (1000 * 60) / 1000)\n          },\n          isExpired: false\n        });\n      }\n    };\n\n    _this.counter = function () {\n      _this.timer = setInterval(function () {\n        _this.setDate();\n      }, 1000);\n    };\n\n    return _this;\n  }\n\n  _createClass(CountDown, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setDate();\n      this.counter();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          remaining = _this$state.remaining,\n          isExpired = _this$state.isExpired,\n          _this$props2 = this.props,\n          targetDate = _this$props2.targetDate,\n          targetTime = _this$props2.targetTime;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, !isExpired && targetDate && targetTime ? React.createElement(\"div\", {\n        className: \"counter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, Object.entries(remaining).map(function (el, i) {\n        return React.createElement(\"div\", {\n          key: i,\n          className: \"entry\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          key: el[1],\n          className: \"entry-value\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"count top curr flipTop\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, el[1] + 1), React.createElement(\"span\", {\n          className: \"count top next\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, el[1]), React.createElement(\"span\", {\n          className: \"count bottom next flipBottom\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, el[1]), React.createElement(\"span\", {\n          className: \"count bottom curr\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, el[1] + 1)), React.createElement(\"div\", {\n          className: \"entry-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, el[0].toUpperCase()));\n      })) : React.createElement(\"p\", {\n        className: \"alert-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Expired\"));\n    }\n  }]);\n\n  return CountDown;\n}(React.Component);\n\nexport default CountDown;","map":{"version":3,"sources":["/home/pmaheshwari/Desktop/TowardsStartUp/MunWorld/cleanui-admin-template-react-cra/src/pages/dashboard/crypto/register/CountDown/index.js"],"names":["React","CountDown","state","remaining","days","hours","minutes","seconds","isExpired","setDate","props","targetDate","targetTime","now","Date","getTime","countDownDate","distance","clearInterval","timer","setState","Math","floor","counter","setInterval","Object","entries","map","el","i","toUpperCase","Component"],"mappings":"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","sourcesContent":["import React  from 'react'\n\nimport './index.css'\nclass CountDown extends React.Component {\n  state = {\n    remaining: {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    },\n    isExpired: false\n  };\n  // used to set and clear interval\n  timer;\n  // used to calculate the distance between \"current date and time\" and the \"target date and time\"\n  distance;\n\n  componentDidMount() {\n    this.setDate();\n    this.counter();\n  }\n\n  setDate = () => {\n    const { targetDate, targetTime } = this.props,\n      // Get todays date and time\n      now = new Date().getTime(),\n      // Set the date we're counting down to\n      countDownDate = new Date(targetDate + \" \" + targetTime).getTime();\n    \n    // Find the distance between now and the count down date\n    this.distance = countDownDate - now;\n    \n    // target date and time is less than current date and time\n    if (this.distance < 0) {\n      clearInterval(this.timer);\n      this.setState({ isExpired: true });\n    } else {\n      this.setState({\n        remaining: {\n          days: Math.floor(this.distance / (1000 * 60 * 60 * 24)),\n          hours: Math.floor(\n            (this.distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n          ),\n          minutes: Math.floor((this.distance % (1000 * 60 * 60)) / (1000 * 60)),\n          seconds: Math.floor((this.distance % (1000 * 60)) / 1000)\n        },\n        isExpired: false\n      });\n    }\n  };\n\n  counter = () => {\n    this.timer = setInterval(() => {\n      this.setDate();\n    }, 1000);\n  };\n\n  render() {\n    const { remaining, isExpired } = this.state,\n    {targetDate, targetTime} = this.props;\n    \n    return (\n      <React.Fragment>\n        {!isExpired && targetDate && targetTime ? (\n          <div className=\"counter\">\n            {Object.entries(remaining).map((el, i) => (\n              <div key={i} className=\"entry\">\n                <div key={el[1]} className=\"entry-value\">\n                  <span className=\"count top curr flipTop\">{el[1] + 1}</span>\n                  <span className=\"count top next\">{el[1]}</span>\n                  <span className=\"count bottom next flipBottom\">{el[1]}</span>\n                  <span className=\"count bottom curr\">{el[1] + 1}</span>\n                </div>\n                <div className=\"entry-title\">{el[0].toUpperCase()}</div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p className=\"alert-danger\">Expired</p>\n        )}\n      </React.Fragment> \n    );\n  }\n}\n\nexport default CountDown\n"]},"metadata":{},"sourceType":"module"}