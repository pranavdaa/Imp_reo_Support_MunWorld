{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexports.default = function () {\n  var source = _utils.identity;\n\n  function calculator(data) {\n    var algorithm = (0, _utils.mappedSlidingWindow)().windowSize(2).undefinedValue(function (_ref) {\n      var open = _ref.open,\n          high = _ref.high,\n          low = _ref.low,\n          close = _ref.close;\n      close = (open + high + low + close) / 4;\n      return {\n        open: open,\n        high: high,\n        low: low,\n        close: close\n      };\n    }).accumulator(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          prev = _ref3[0],\n          now = _ref3[1]; // console.log(prev, now);\n\n\n      var date = now.date,\n          volume = now.volume;\n      var close = (now.open + now.high + now.low + now.close) / 4;\n      var open = (prev.open + prev.close) / 2;\n      var high = Math.max(open, now.high, close);\n      var low = Math.min(open, now.low, close);\n      return {\n        date: date,\n        open: open,\n        high: high,\n        low: low,\n        close: close,\n        volume: volume\n      };\n    });\n    return algorithm(data);\n  }\n\n  calculator.source = function (x) {\n    if (!arguments.length) {\n      return source;\n    }\n\n    source = x;\n    return calculator;\n  };\n\n  return calculator;\n};\n\nvar _utils = require(\"../utils\");","map":null,"metadata":{},"sourceType":"script"}