{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _d3Format = require(\"d3-format\");\n\nvar _displayValuesFor = require(\"./displayValuesFor\");\n\nvar _displayValuesFor2 = _interopRequireDefault(_displayValuesFor);\n\nvar _GenericChartComponent = require(\"../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _ToolTipText = require(\"./ToolTipText\");\n\nvar _ToolTipText2 = _interopRequireDefault(_ToolTipText);\n\nvar _ToolTipTSpanLabel = require(\"./ToolTipTSpanLabel\");\n\nvar _ToolTipTSpanLabel2 = _interopRequireDefault(_ToolTipTSpanLabel);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar VALID_LAYOUTS = [\"horizontal\", \"horizontalRows\", \"horizontalInline\", \"vertical\", \"verticalRows\"];\n\nvar SingleTooltip = function (_Component) {\n  _inherits(SingleTooltip, _Component);\n\n  function SingleTooltip(props) {\n    _classCallCheck(this, SingleTooltip);\n\n    var _this = _possibleConstructorReturn(this, (SingleTooltip.__proto__ || Object.getPrototypeOf(SingleTooltip)).call(this, props));\n\n    _this.handleClick = _this.handleClick.bind(_this);\n    return _this;\n  }\n\n  _createClass(SingleTooltip, [{\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      var _props = this.props,\n          onClick = _props.onClick,\n          forChart = _props.forChart,\n          options = _props.options;\n      onClick(_extends({\n        chartId: forChart\n      }, options), e);\n    }\n    /**\n     * Renders the value next to the label.\n     */\n\n  }, {\n    key: \"renderValueNextToLabel\",\n    value: function renderValueNextToLabel() {\n      var _props2 = this.props,\n          origin = _props2.origin,\n          yLabel = _props2.yLabel,\n          yValue = _props2.yValue,\n          labelFill = _props2.labelFill,\n          valueFill = _props2.valueFill,\n          withShape = _props2.withShape,\n          fontSize = _props2.fontSize,\n          fontFamily = _props2.fontFamily;\n      return _react2.default.createElement(\"g\", {\n        transform: \"translate(\" + origin[0] + \", \" + origin[1] + \")\",\n        onClick: this.handleClick\n      }, withShape ? _react2.default.createElement(\"rect\", {\n        x: \"0\",\n        y: \"-6\",\n        width: \"6\",\n        height: \"6\",\n        fill: valueFill\n      }) : null, _react2.default.createElement(_ToolTipText2.default, {\n        x: withShape ? 8 : 0,\n        y: 0,\n        fontFamily: fontFamily,\n        fontSize: fontSize\n      }, _react2.default.createElement(_ToolTipTSpanLabel2.default, {\n        fill: labelFill\n      }, yLabel, \": \"), _react2.default.createElement(\"tspan\", {\n        fill: valueFill\n      }, yValue)));\n    }\n    /**\n     * Renders the value beneath the label.\n     */\n\n  }, {\n    key: \"renderValueBeneathToLabel\",\n    value: function renderValueBeneathToLabel() {\n      var _props3 = this.props,\n          origin = _props3.origin,\n          yLabel = _props3.yLabel,\n          yValue = _props3.yValue,\n          labelFill = _props3.labelFill,\n          valueFill = _props3.valueFill,\n          withShape = _props3.withShape,\n          fontSize = _props3.fontSize,\n          fontFamily = _props3.fontFamily;\n      return _react2.default.createElement(\"g\", {\n        transform: \"translate(\" + origin[0] + \", \" + origin[1] + \")\",\n        onClick: this.handleClick\n      }, withShape ? _react2.default.createElement(\"line\", {\n        x1: 0,\n        y1: 2,\n        x2: 0,\n        y2: 28,\n        stroke: valueFill,\n        strokeWidth: \"4px\"\n      }) : null, _react2.default.createElement(_ToolTipText2.default, {\n        x: 5,\n        y: 11,\n        fontFamily: fontFamily,\n        fontSize: fontSize\n      }, _react2.default.createElement(_ToolTipTSpanLabel2.default, {\n        fill: labelFill\n      }, yLabel), _react2.default.createElement(\"tspan\", {\n        x: \"5\",\n        dy: \"15\",\n        fill: valueFill\n      }, yValue)));\n    }\n    /**\n     * Renders the value next to the label.\n     * The parent component must have a \"text\"-element.\n     */\n\n  }, {\n    key: \"renderInline\",\n    value: function renderInline() {\n      var _props4 = this.props,\n          yLabel = _props4.yLabel,\n          yValue = _props4.yValue,\n          labelFill = _props4.labelFill,\n          valueFill = _props4.valueFill,\n          fontSize = _props4.fontSize,\n          fontFamily = _props4.fontFamily;\n      return _react2.default.createElement(\"tspan\", {\n        onClick: this.handleClick,\n        fontFamily: fontFamily,\n        fontSize: fontSize\n      }, _react2.default.createElement(_ToolTipTSpanLabel2.default, {\n        fill: labelFill\n      }, yLabel, \":\\xA0\"), _react2.default.createElement(\"tspan\", {\n        fill: valueFill\n      }, yValue, \"\\xA0\\xA0\"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var layout = this.props.layout;\n      var comp = null;\n\n      switch (layout) {\n        case \"horizontal\":\n          comp = this.renderValueNextToLabel();\n          break;\n\n        case \"horizontalRows\":\n          comp = this.renderValueBeneathToLabel();\n          break;\n\n        case \"horizontalInline\":\n          comp = this.renderInline();\n          break;\n\n        case \"vertical\":\n          comp = this.renderValueNextToLabel();\n          break;\n\n        case \"verticalRows\":\n          comp = this.renderValueBeneathToLabel();\n          break;\n\n        default:\n          comp = this.renderValueNextToLabel();\n      }\n\n      return comp;\n    }\n  }]);\n\n  return SingleTooltip;\n}(_react.Component);\n\nSingleTooltip.propTypes = {\n  origin: _propTypes2.default.array.isRequired,\n  yLabel: _propTypes2.default.string.isRequired,\n  yValue: _propTypes2.default.string.isRequired,\n  onClick: _propTypes2.default.func,\n  fontFamily: _propTypes2.default.string,\n  labelFill: _propTypes2.default.string.isRequired,\n  valueFill: _propTypes2.default.string.isRequired,\n  fontSize: _propTypes2.default.number,\n  withShape: _propTypes2.default.bool,\n  forChart: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,\n  options: _propTypes2.default.object.isRequired,\n  layout: _propTypes2.default.oneOf(VALID_LAYOUTS).isRequired\n};\nSingleTooltip.defaultProps = {\n  labelFill: \"#4682B4\",\n  valueFill: \"#000000\",\n  withShape: false\n};\n\nvar GroupTooltip = function (_Component2) {\n  _inherits(GroupTooltip, _Component2);\n\n  function GroupTooltip(props) {\n    _classCallCheck(this, GroupTooltip);\n\n    var _this2 = _possibleConstructorReturn(this, (GroupTooltip.__proto__ || Object.getPrototypeOf(GroupTooltip)).call(this, props));\n\n    _this2.renderSVG = _this2.renderSVG.bind(_this2);\n    return _this2;\n  }\n\n  _createClass(GroupTooltip, [{\n    key: \"getPosition\",\n    value: function getPosition(moreProps) {\n      var position = this.props.position;\n      var _moreProps$chartConfi = moreProps.chartConfig,\n          height = _moreProps$chartConfi.height,\n          width = _moreProps$chartConfi.width;\n      var dx = 20;\n      var dy = 40;\n      var textAnchor = null;\n      var xyPos = null;\n\n      if (position !== undefined) {\n        switch (position) {\n          case \"topRight\":\n            xyPos = [width - dx, null];\n            textAnchor = \"end\";\n            break;\n\n          case \"bottomLeft\":\n            xyPos = [null, height - dy];\n            break;\n\n          case \"bottomRight\":\n            xyPos = [width - dx, height - dy];\n            textAnchor = \"end\";\n            break;\n\n          default:\n            xyPos = [null, null];\n        }\n      } else {\n        xyPos = [null, null];\n      }\n\n      return {\n        xyPos: xyPos,\n        textAnchor: textAnchor\n      };\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG(moreProps) {\n      var displayValuesFor = this.props.displayValuesFor;\n      var chartId = moreProps.chartId;\n      var _props5 = this.props,\n          className = _props5.className,\n          onClick = _props5.onClick,\n          width = _props5.width,\n          verticalSize = _props5.verticalSize,\n          fontFamily = _props5.fontFamily,\n          fontSize = _props5.fontSize,\n          layout = _props5.layout;\n      var _props6 = this.props,\n          origin = _props6.origin,\n          displayFormat = _props6.displayFormat,\n          options = _props6.options;\n      var currentItem = displayValuesFor(this.props, moreProps);\n\n      var _getPosition = this.getPosition(moreProps),\n          xyPos = _getPosition.xyPos,\n          textAnchor = _getPosition.textAnchor;\n\n      var xPos = xyPos != null && xyPos[0] != null ? xyPos[0] : origin[0];\n      var yPos = xyPos != null && xyPos[1] != null ? xyPos[1] : origin[1];\n      var singleTooltip = options.map(function (each, idx) {\n        var yValue = currentItem && each.yAccessor(currentItem);\n        var yDisplayValue = yValue ? displayFormat(yValue) : \"n/a\";\n\n        var orig = function orig() {\n          if (layout === \"horizontal\" || layout === \"horizontalRows\") {\n            return [width * idx, 0];\n          }\n\n          if (layout === \"vertical\") {\n            return [0, verticalSize * idx];\n          }\n\n          if (layout === \"verticalRows\") {\n            return [0, verticalSize * 2.3 * idx];\n          }\n\n          return [0, 0];\n        };\n\n        return _react2.default.createElement(SingleTooltip, {\n          key: idx,\n          layout: layout,\n          origin: orig(),\n          yLabel: each.yLabel,\n          yValue: yDisplayValue,\n          options: each,\n          forChart: chartId,\n          onClick: onClick,\n          fontFamily: fontFamily,\n          fontSize: fontSize,\n          labelFill: each.labelFill,\n          valueFill: each.valueFill,\n          withShape: each.withShape\n        });\n      });\n      return _react2.default.createElement(\"g\", {\n        transform: \"translate(\" + xPos + \", \" + yPos + \")\",\n        className: className,\n        textAnchor: textAnchor\n      }, layout === \"horizontalInline\" ? _react2.default.createElement(_ToolTipText2.default, {\n        x: 0,\n        y: 0,\n        fontFamily: fontFamily,\n        fontSize: fontSize\n      }, singleTooltip) : singleTooltip);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(_GenericChartComponent2.default, {\n        clip: false,\n        svgDraw: this.renderSVG,\n        drawOn: [\"mousemove\"]\n      });\n    }\n  }]);\n\n  return GroupTooltip;\n}(_react.Component);\n\nGroupTooltip.propTypes = {\n  className: _propTypes2.default.string,\n  layout: _propTypes2.default.oneOf(VALID_LAYOUTS).isRequired,\n  position: _propTypes2.default.oneOf([\"topRight\", \"bottomLeft\", \"bottomRight\"]),\n  displayFormat: _propTypes2.default.func.isRequired,\n  origin: _propTypes2.default.array.isRequired,\n  displayValuesFor: _propTypes2.default.func,\n  onClick: _propTypes2.default.func,\n  fontFamily: _propTypes2.default.string,\n  fontSize: _propTypes2.default.number,\n  width: _propTypes2.default.number,\n  // \"width\" only be used, if layout is \"horizontal\" or \"horizontalRows\".\n  verticalSize: _propTypes2.default.number,\n  // \"verticalSize\" only be used, if layout is \"vertical\", \"verticalRows\".\n  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    yLabel: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,\n    yAccessor: _propTypes2.default.func.isRequired,\n    labelFill: _propTypes2.default.string,\n    valueFill: _propTypes2.default.string,\n    withShape: _propTypes2.default.bool // \"withShape\" is ignored, if layout is \"horizontalInline\" or \"vertical\".\n\n  }))\n};\nGroupTooltip.defaultProps = {\n  className: \"react-stockcharts-tooltip react-stockcharts-group-tooltip\",\n  layout: \"horizontal\",\n  displayFormat: (0, _d3Format.format)(\".2f\"),\n  displayValuesFor: _displayValuesFor2.default,\n  origin: [0, 0],\n  width: 60,\n  verticalSize: 13\n};\nexports.default = GroupTooltip;","map":null,"metadata":{},"sourceType":"script"}