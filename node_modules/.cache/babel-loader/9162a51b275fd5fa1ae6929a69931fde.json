{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction Triangle(props) {\n  var className = props.className,\n      strokeWidth = props.strokeWidth,\n      opacity = props.opacity,\n      point = props.point,\n      width = props.width;\n  var rotation = getRotationInDegrees(props, point);\n  if (rotation == null) return null;\n  var fillColor = getFillColor(props);\n  var strokeColor = getStrokeColor(props);\n  var w = (0, _utils.functor)(width)(point.datum);\n  var x = point.x,\n      y = point.y;\n\n  var _getTrianglePoints = getTrianglePoints(w),\n      innerOpposite = _getTrianglePoints.innerOpposite,\n      innerHypotenuse = _getTrianglePoints.innerHypotenuse;\n\n  var points = \"\\n\\t\\t\" + x + \" \" + (y - innerHypotenuse) + \",\\n\\t\\t\" + (x + w / 2) + \" \" + (y + innerOpposite) + \",\\n\\t\\t\" + (x - w / 2) + \" \" + (y + innerOpposite) + \"\\n\\t\";\n  return _react2.default.createElement(\"polygon\", {\n    className: className,\n    points: points,\n    stroke: strokeColor,\n    strokeWidth: strokeWidth,\n    fillOpacity: opacity,\n    fill: fillColor,\n    transform: rotation !== 0 ? \"rotate(\" + rotation + \", \" + x + \", \" + y + \")\" : null\n  });\n}\n\nTriangle.propTypes = {\n  direction: _propTypes2.default.oneOfType([_propTypes2.default.oneOf([\"top\", \"bottom\", \"left\", \"right\", \"hide\"]), _propTypes2.default.func]).isRequired,\n  stroke: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,\n  fill: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,\n  opacity: _propTypes2.default.number.isRequired,\n  point: _propTypes2.default.shape({\n    x: _propTypes2.default.number.isRequired,\n    y: _propTypes2.default.number.isRequired,\n    datum: _propTypes2.default.object.isRequired\n  }).isRequired,\n  className: _propTypes2.default.string,\n  strokeWidth: _propTypes2.default.number,\n  width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.func]).isRequired\n};\nTriangle.defaultProps = {\n  direction: \"top\",\n  stroke: \"#4682B4\",\n  strokeWidth: 1,\n  opacity: 0.5,\n  fill: \"#4682B4\",\n  className: \"react-stockcharts-marker-triangle\"\n};\n\nTriangle.drawOnCanvas = function (props, point, ctx) {\n  var stroke = props.stroke,\n      fill = props.fill,\n      opacity = props.opacity,\n      strokeWidth = props.strokeWidth;\n  ctx.strokeStyle = stroke;\n  ctx.lineWidth = strokeWidth;\n\n  if (fill !== \"none\") {\n    ctx.fillStyle = (0, _utils.hexToRGBA)(fill, opacity);\n  }\n\n  Triangle.drawOnCanvasWithNoStateChange(props, point, ctx);\n};\n\nTriangle.drawOnCanvasWithNoStateChange = function (props, point, ctx) {\n  var width = props.width;\n  var w = (0, _utils.functor)(width)(point.datum);\n  var x = point.x,\n      y = point.y;\n\n  var _getTrianglePoints2 = getTrianglePoints(w),\n      innerOpposite = _getTrianglePoints2.innerOpposite,\n      innerHypotenuse = _getTrianglePoints2.innerHypotenuse;\n\n  var rotationDeg = getRotationInDegrees(props, point);\n  ctx.beginPath();\n  ctx.moveTo(x, y - innerHypotenuse);\n  ctx.lineTo(x + w / 2, y + innerOpposite);\n  ctx.lineTo(x - w / 2, y + innerOpposite);\n  ctx.stroke(); // TODO: rotation does not work\n  // example: https://gist.github.com/geoffb/6392450\n\n  if (rotationDeg !== null && rotationDeg !== 0) {\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(rotationDeg * Math.PI / 180); // 45 degrees\n\n    ctx.fill();\n    ctx.restore();\n  }\n\n  ctx.fill();\n};\n\nexports.default = Triangle;\n\nfunction getTrianglePoints(width) {\n  var innerHypotenuse = width / 2 * (1 / Math.cos(30 * Math.PI / 180));\n  var innerOpposite = width / 2 * (1 / Math.tan(60 * Math.PI / 180));\n  return {\n    innerOpposite: innerOpposite,\n    innerHypotenuse: innerHypotenuse\n  };\n}\n\nfunction getFillColor(props) {\n  var fill = props.fill,\n      point = props.point;\n  return fill instanceof Function ? fill(point.datum) : fill;\n}\n\nfunction getStrokeColor(props) {\n  var stroke = props.stroke,\n      point = props.point;\n  return stroke instanceof Function ? stroke(point.datum) : stroke;\n}\n\nfunction getRotationInDegrees(props, point) {\n  var direction = props.direction;\n  var directionVal = direction instanceof Function ? direction(point.datum) : direction;\n  if (directionVal === \"hide\") return null;\n  var rotate = 0;\n\n  switch (directionVal) {\n    case \"bottom\":\n      rotate = 180;\n      break;\n\n    case \"left\":\n      rotate = -90;\n      break;\n\n    case \"right\":\n      rotate = 90;\n      break;\n  }\n\n  return rotate;\n}","map":null,"metadata":{},"sourceType":"script"}