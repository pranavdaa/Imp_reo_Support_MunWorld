{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _GenericChartComponent = require(\"../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _GenericComponent = require(\"../GenericComponent\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar RenkoSeries = function (_Component) {\n  _inherits(RenkoSeries, _Component);\n\n  function RenkoSeries(props) {\n    _classCallCheck(this, RenkoSeries);\n\n    var _this = _possibleConstructorReturn(this, (RenkoSeries.__proto__ || Object.getPrototypeOf(RenkoSeries)).call(this, props));\n\n    _this.renderSVG = _this.renderSVG.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    return _this;\n  }\n\n  _createClass(RenkoSeries, [{\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      var xAccessor = moreProps.xAccessor;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData;\n      var yAccessor = this.props.yAccessor;\n      var candles = getRenko(this.props, plotData, xScale, xAccessor, yScale, yAccessor);\n\n      _drawOnCanvas(ctx, candles);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var clip = this.props.clip;\n      return _react2.default.createElement(_GenericChartComponent2.default, {\n        clip: clip,\n        svgDraw: this.renderSVG,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: _GenericComponent.getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG(moreProps) {\n      var xAccessor = moreProps.xAccessor;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData;\n      var yAccessor = this.props.yAccessor;\n      var candles = getRenko(this.props, plotData, xScale, xAccessor, yScale, yAccessor).map(function (each, idx) {\n        return _react2.default.createElement(\"rect\", {\n          key: idx,\n          className: each.className,\n          fill: each.fill,\n          x: each.x,\n          y: each.y,\n          width: each.width,\n          height: each.height\n        });\n      });\n      return _react2.default.createElement(\"g\", null, _react2.default.createElement(\"g\", {\n        className: \"candle\"\n      }, candles));\n    }\n  }]);\n\n  return RenkoSeries;\n}(_react.Component);\n\nRenkoSeries.propTypes = {\n  classNames: _propTypes2.default.shape({\n    up: _propTypes2.default.string,\n    down: _propTypes2.default.string\n  }),\n  stroke: _propTypes2.default.shape({\n    up: _propTypes2.default.string,\n    down: _propTypes2.default.string\n  }),\n  fill: _propTypes2.default.shape({\n    up: _propTypes2.default.string,\n    down: _propTypes2.default.string,\n    partial: _propTypes2.default.string\n  }),\n  yAccessor: _propTypes2.default.func.isRequired,\n  clip: _propTypes2.default.bool.isRequired\n};\nRenkoSeries.defaultProps = {\n  classNames: {\n    up: \"up\",\n    down: \"down\"\n  },\n  stroke: {\n    up: \"none\",\n    down: \"none\"\n  },\n  fill: {\n    up: \"#6BA583\",\n    down: \"#E60000\",\n    partial: \"#4682B4\"\n  },\n  yAccessor: function yAccessor(d) {\n    return {\n      open: d.open,\n      high: d.high,\n      low: d.low,\n      close: d.close\n    };\n  },\n  clip: true\n};\n\nfunction _drawOnCanvas(ctx, renko) {\n  renko.forEach(function (d) {\n    ctx.beginPath();\n    ctx.strokeStyle = d.stroke;\n    ctx.fillStyle = d.fill;\n    ctx.rect(d.x, d.y, d.width, d.height);\n    ctx.closePath();\n    ctx.fill();\n  });\n}\n\nfunction getRenko(props, plotData, xScale, xAccessor, yScale, yAccessor) {\n  var classNames = props.classNames,\n      fill = props.fill;\n  var width = xScale(xAccessor(plotData[plotData.length - 1])) - xScale(xAccessor(plotData[0]));\n  var candleWidth = width / (plotData.length - 1);\n  var candles = plotData.filter(function (d) {\n    return (0, _utils.isDefined)(yAccessor(d).close);\n  }).map(function (d) {\n    var ohlc = yAccessor(d);\n    var x = xScale(xAccessor(d)) - 0.5 * candleWidth,\n        y = yScale(Math.max(ohlc.open, ohlc.close)),\n        height = Math.abs(yScale(ohlc.open) - yScale(ohlc.close)),\n        className = ohlc.open <= ohlc.close ? classNames.up : classNames.down;\n    var svgfill = d.fullyFormed ? ohlc.open <= ohlc.close ? fill.up : fill.down : fill.partial;\n    return {\n      className: className,\n      fill: svgfill,\n      x: x,\n      y: y,\n      height: height,\n      width: candleWidth\n    };\n  });\n  return candles;\n}\n\nexports.default = RenkoSeries;","map":null,"metadata":{},"sourceType":"script"}