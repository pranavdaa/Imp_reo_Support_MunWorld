{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexports.default = function () {\n  var options = _defaultOptionsForComputation.SAR;\n\n  function calculator(data) {\n    var _options = options,\n        accelerationFactor = _options.accelerationFactor,\n        maxAccelerationFactor = _options.maxAccelerationFactor;\n    var algorithm = (0, _utils.mappedSlidingWindow)().windowSize(2).undefinedValue(function (_ref) {\n      var high = _ref.high,\n          low = _ref.low;\n      return {\n        risingSar: low,\n        risingEp: high,\n        fallingSar: high,\n        fallingEp: low,\n        af: accelerationFactor\n      };\n    }).accumulator(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          prev = _ref3[0],\n          now = _ref3[1];\n\n      var _calc = calc(prev, now),\n          risingSar = _calc.risingSar,\n          fallingSar = _calc.fallingSar,\n          risingEp = _calc.risingEp,\n          fallingEp = _calc.fallingEp;\n\n      if ((0, _utils.isNotDefined)(prev.use) && risingSar > now.low && fallingSar < now.high) {\n        return {\n          risingSar: risingSar,\n          fallingSar: fallingSar,\n          risingEp: risingEp,\n          fallingEp: fallingEp\n        };\n      }\n\n      var use = (0, _utils.isDefined)(prev.use) ? prev.use === \"rising\" ? risingSar > now.low ? \"falling\" : \"rising\" : fallingSar < now.high ? \"rising\" : \"falling\" : risingSar > now.low ? \"falling\" : \"rising\";\n      var current = prev.use === use ? {\n        af: Math.min(maxAccelerationFactor, prev.af + accelerationFactor),\n        fallingEp: fallingEp,\n        risingEp: risingEp,\n        fallingSar: fallingSar,\n        risingSar: risingSar\n      } : {\n        af: accelerationFactor,\n        fallingEp: now.low,\n        risingEp: now.high,\n        fallingSar: Math.max(prev.risingEp, now.high),\n        risingSar: Math.min(prev.fallingEp, now.low)\n      };\n      var date = now.date,\n          high = now.high,\n          low = now.low;\n      return _extends({\n        date: date,\n        high: high,\n        low: low\n      }, current, {\n        use: use,\n        sar: use === \"falling\" ? current.fallingSar : current.risingSar\n      });\n    });\n    var calculatedData = algorithm(data).map(function (d) {\n      return d.sar;\n    }); // console.log(calculatedData);\n\n    return calculatedData;\n  }\n\n  calculator.undefinedLength = function () {\n    return 1;\n  };\n\n  calculator.options = function (x) {\n    if (!arguments.length) {\n      return options;\n    }\n\n    options = _extends({}, _defaultOptionsForComputation.SAR, x);\n    return calculator;\n  };\n\n  return calculator;\n};\n\nvar _utils = require(\"../utils\");\n\nvar _defaultOptionsForComputation = require(\"./defaultOptionsForComputation\");\n\nfunction calc(prev, now) {\n  var risingSar = prev.risingSar + prev.af * (prev.risingEp - prev.risingSar);\n  var fallingSar = prev.fallingSar - prev.af * (prev.fallingSar - prev.fallingEp);\n  var risingEp = Math.max(prev.risingEp, now.high);\n  var fallingEp = Math.min(prev.fallingEp, now.low);\n  return {\n    risingSar: risingSar,\n    fallingSar: fallingSar,\n    risingEp: risingEp,\n    fallingEp: fallingEp\n  };\n}","map":null,"metadata":{},"sourceType":"script"}