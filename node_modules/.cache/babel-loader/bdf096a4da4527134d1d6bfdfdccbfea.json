{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _d3Collection = require(\"d3-collection\");\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _GenericChartComponent = require(\"../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _GenericComponent = require(\"../GenericComponent\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar CandlestickSeries = function (_Component) {\n  _inherits(CandlestickSeries, _Component);\n\n  function CandlestickSeries(props) {\n    _classCallCheck(this, CandlestickSeries);\n\n    var _this = _possibleConstructorReturn(this, (CandlestickSeries.__proto__ || Object.getPrototypeOf(CandlestickSeries)).call(this, props));\n\n    _this.renderSVG = _this.renderSVG.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    return _this;\n  }\n\n  _createClass(CandlestickSeries, [{\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      _drawOnCanvas(ctx, this.props, moreProps);\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG(moreProps) {\n      var _props = this.props,\n          className = _props.className,\n          wickClassName = _props.wickClassName,\n          candleClassName = _props.candleClassName;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData,\n          xAccessor = moreProps.xAccessor;\n      var candleData = getCandleData(this.props, xAccessor, xScale, yScale, plotData);\n      return _react2.default.createElement(\"g\", {\n        className: className\n      }, _react2.default.createElement(\"g\", {\n        className: wickClassName,\n        key: \"wicks\"\n      }, getWicksSVG(candleData)), _react2.default.createElement(\"g\", {\n        className: candleClassName,\n        key: \"candles\"\n      }, getCandlesSVG(this.props, candleData)));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var clip = this.props.clip;\n      return _react2.default.createElement(_GenericChartComponent2.default, {\n        clip: clip,\n        svgDraw: this.renderSVG,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: _GenericComponent.getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return CandlestickSeries;\n}(_react.Component);\n\nCandlestickSeries.propTypes = {\n  className: _propTypes2.default.string,\n  wickClassName: _propTypes2.default.string,\n  candleClassName: _propTypes2.default.string,\n  widthRatio: _propTypes2.default.number,\n  width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.func]),\n  classNames: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),\n  fill: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),\n  stroke: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),\n  wickStroke: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),\n  yAccessor: _propTypes2.default.func,\n  clip: _propTypes2.default.bool\n};\nCandlestickSeries.defaultProps = {\n  className: \"react-stockcharts-candlestick\",\n  wickClassName: \"react-stockcharts-candlestick-wick\",\n  candleClassName: \"react-stockcharts-candlestick-candle\",\n  yAccessor: function yAccessor(d) {\n    return {\n      open: d.open,\n      high: d.high,\n      low: d.low,\n      close: d.close\n    };\n  },\n  classNames: function classNames(d) {\n    return d.close > d.open ? \"up\" : \"down\";\n  },\n  width: _utils.plotDataLengthBarWidth,\n  wickStroke: \"#000000\",\n  // wickStroke: d => d.close > d.open ? \"#6BA583\" : \"#FF0000\",\n  fill: function fill(d) {\n    return d.close > d.open ? \"#6BA583\" : \"#FF0000\";\n  },\n  // stroke: d => d.close > d.open ? \"#6BA583\" : \"#FF0000\",\n  stroke: \"#000000\",\n  candleStrokeWidth: 0.5,\n  // stroke: \"none\",\n  widthRatio: 0.8,\n  opacity: 0.5,\n  clip: true\n};\n\nfunction getWicksSVG(candleData) {\n  var wicks = candleData.map(function (each, idx) {\n    var d = each.wick;\n    return _react2.default.createElement(\"path\", {\n      key: idx,\n      className: each.className,\n      stroke: d.stroke,\n      d: \"M\" + d.x + \",\" + d.y1 + \" L\" + d.x + \",\" + d.y2 + \" M\" + d.x + \",\" + d.y3 + \" L\" + d.x + \",\" + d.y4\n    });\n  });\n  return wicks;\n}\n\nfunction getCandlesSVG(props, candleData) {\n  /* eslint-disable react/prop-types */\n  var opacity = props.opacity,\n      candleStrokeWidth = props.candleStrokeWidth;\n  /* eslint-enable react/prop-types */\n\n  var candles = candleData.map(function (d, idx) {\n    if (d.width <= 1) return _react2.default.createElement(\"line\", {\n      className: d.className,\n      key: idx,\n      x1: d.x,\n      y1: d.y,\n      x2: d.x,\n      y2: d.y + d.height,\n      stroke: d.fill\n    });else if (d.height === 0) return _react2.default.createElement(\"line\", {\n      key: idx,\n      x1: d.x,\n      y1: d.y,\n      x2: d.x + d.width,\n      y2: d.y + d.height,\n      stroke: d.fill\n    });\n    return _react2.default.createElement(\"rect\", {\n      key: idx,\n      className: d.className,\n      fillOpacity: opacity,\n      x: d.x,\n      y: d.y,\n      width: d.width,\n      height: d.height,\n      fill: d.fill,\n      stroke: d.stroke,\n      strokeWidth: candleStrokeWidth\n    });\n  });\n  return candles;\n}\n\nfunction _drawOnCanvas(ctx, props, moreProps) {\n  var opacity = props.opacity,\n      candleStrokeWidth = props.candleStrokeWidth;\n  var xScale = moreProps.xScale,\n      yScale = moreProps.chartConfig.yScale,\n      plotData = moreProps.plotData,\n      xAccessor = moreProps.xAccessor; // const wickData = getWickData(props, xAccessor, xScale, yScale, plotData);\n\n  var candleData = getCandleData(props, xAccessor, xScale, yScale, plotData);\n  var wickNest = (0, _d3Collection.nest)().key(function (d) {\n    return d.wick.stroke;\n  }).entries(candleData);\n  wickNest.forEach(function (outer) {\n    var key = outer.key,\n        values = outer.values;\n    ctx.strokeStyle = key;\n    ctx.fillStyle = key;\n    values.forEach(function (each) {\n      /*\n      ctx.moveTo(d.x, d.y1);\n      ctx.lineTo(d.x, d.y2);\n      \tctx.beginPath();\n      ctx.moveTo(d.x, d.y3);\n      ctx.lineTo(d.x, d.y4);\n      ctx.stroke(); */\n      var d = each.wick;\n      ctx.fillRect(d.x - 0.5, d.y1, 1, d.y2 - d.y1);\n      ctx.fillRect(d.x - 0.5, d.y3, 1, d.y4 - d.y3);\n    });\n  }); // const candleData = getCandleData(props, xAccessor, xScale, yScale, plotData);\n\n  var candleNest = (0, _d3Collection.nest)().key(function (d) {\n    return d.stroke;\n  }).key(function (d) {\n    return d.fill;\n  }).entries(candleData);\n  candleNest.forEach(function (outer) {\n    var strokeKey = outer.key,\n        strokeValues = outer.values;\n\n    if (strokeKey !== \"none\") {\n      ctx.strokeStyle = strokeKey;\n      ctx.lineWidth = candleStrokeWidth;\n    }\n\n    strokeValues.forEach(function (inner) {\n      var key = inner.key,\n          values = inner.values;\n      var fillStyle = (0, _utils.head)(values).width <= 1 ? key : (0, _utils.hexToRGBA)(key, opacity);\n      ctx.fillStyle = fillStyle;\n      values.forEach(function (d) {\n        if (d.width <= 1) {\n          // <line className={d.className} key={idx} x1={d.x} y1={d.y} x2={d.x} y2={d.y + d.height}/>\n\n          /*\n          ctx.beginPath();\n          ctx.moveTo(d.x, d.y);\n          ctx.lineTo(d.x, d.y + d.height);\n          ctx.stroke();\n          */\n          ctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n        } else if (d.height === 0) {\n          // <line key={idx} x1={d.x} y1={d.y} x2={d.x + d.width} y2={d.y + d.height} />\n\n          /*\n          ctx.beginPath();\n          ctx.moveTo(d.x, d.y);\n          ctx.lineTo(d.x + d.width, d.y + d.height);\n          ctx.stroke();\n          */\n          ctx.fillRect(d.x, d.y - 0.5, d.width, 1);\n        } else {\n          /*\n          ctx.beginPath();\n          ctx.rect(d.x, d.y, d.width, d.height);\n          ctx.closePath();\n          ctx.fill();\n          if (strokeKey !== \"none\") ctx.stroke();\n          */\n          ctx.fillRect(d.x, d.y, d.width, d.height);\n          if (strokeKey !== \"none\") ctx.strokeRect(d.x, d.y, d.width, d.height);\n        }\n      });\n    });\n  });\n}\n/*\nfunction getWickData(props, xAccessor, xScale, yScale, plotData) {\n\n\tconst { classNames: classNameProp, wickStroke: wickStrokeProp, yAccessor } = props;\n\tconst wickStroke = functor(wickStrokeProp);\n\tconst className = functor(classNameProp);\n\tconst wickData = plotData\n\t\t\t.filter(d => isDefined(yAccessor(d).close))\n\t\t\t.map(d => {\n\t\t\t\t// console.log(yAccessor);\n\t\t\t\tconst ohlc = yAccessor(d);\n\n\t\t\t\tconst x = Math.round(xScale(xAccessor(d))),\n\t\t\t\t\ty1 = yScale(ohlc.high),\n\t\t\t\t\ty2 = yScale(Math.max(ohlc.open, ohlc.close)),\n\t\t\t\t\ty3 = yScale(Math.min(ohlc.open, ohlc.close)),\n\t\t\t\t\ty4 = yScale(ohlc.low);\n\n\t\t\t\treturn {\n\t\t\t\t\tx,\n\t\t\t\t\ty1,\n\t\t\t\t\ty2,\n\t\t\t\t\ty3,\n\t\t\t\t\ty4,\n\t\t\t\t\tclassName: className(ohlc),\n\t\t\t\t\tdirection: (ohlc.close - ohlc.open),\n\t\t\t\t\tstroke: wickStroke(ohlc),\n\t\t\t\t};\n\t\t\t});\n\treturn wickData;\n}\n*/\n\n\nfunction getCandleData(props, xAccessor, xScale, yScale, plotData) {\n  var wickStrokeProp = props.wickStroke;\n  var wickStroke = (0, _utils.functor)(wickStrokeProp);\n  var classNames = props.classNames,\n      fillProp = props.fill,\n      strokeProp = props.stroke,\n      yAccessor = props.yAccessor;\n  var className = (0, _utils.functor)(classNames);\n  var fill = (0, _utils.functor)(fillProp);\n  var stroke = (0, _utils.functor)(strokeProp);\n  var widthFunctor = (0, _utils.functor)(props.width);\n  var width = widthFunctor(props, {\n    xScale: xScale,\n    xAccessor: xAccessor,\n    plotData: plotData\n  });\n  /*\n  const candleWidth = Math.round(width);\n  const offset = Math.round(candleWidth === 1 ? 0 : 0.5 * width);\n  */\n\n  var trueOffset = 0.5 * width;\n  var offset = trueOffset > 0.7 ? Math.round(trueOffset) : Math.floor(trueOffset); // eslint-disable-next-line prefer-const\n\n  var candles = [];\n\n  for (var i = 0; i < plotData.length; i++) {\n    var d = plotData[i];\n\n    if ((0, _utils.isDefined)(yAccessor(d).close)) {\n      var x = Math.round(xScale(xAccessor(d))); // const x = Math.round(xScale(xAccessor(d)) - offset);\n\n      var ohlc = yAccessor(d);\n      var y = Math.round(yScale(Math.max(ohlc.open, ohlc.close)));\n      var height = Math.round(Math.abs(yScale(ohlc.open) - yScale(ohlc.close)));\n      candles.push({\n        // type: \"line\"\n        x: x - offset,\n        y: y,\n        wick: {\n          stroke: wickStroke(ohlc),\n          x: x,\n          y1: Math.round(yScale(ohlc.high)),\n          y2: y,\n          y3: y + height,\n          // Math.round(yScale(Math.min(ohlc.open, ohlc.close))),\n          y4: Math.round(yScale(ohlc.low))\n        },\n        height: height,\n        width: offset * 2,\n        className: className(ohlc),\n        fill: fill(ohlc),\n        stroke: stroke(ohlc),\n        direction: ohlc.close - ohlc.open\n      });\n    }\n  }\n\n  return candles;\n}\n\nexports.default = CandlestickSeries;","map":null,"metadata":{},"sourceType":"script"}