{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { select, event as d3Event, mouse, touches } from \"d3-selection\";\nimport { isDefined, mousePosition, touchPosition, getTouchProps, d3Window, MOUSEMOVE, MOUSEUP, MOUSEENTER, MOUSELEAVE, TOUCHMOVE, TOUCHEND, noop } from \"./utils\";\nimport { getCurrentCharts } from \"./utils/ChartDataUtil\"; // import { clearTimeout, setTimeout } from \"timers\";\n\nvar EventCapture = function (_Component) {\n  _inherits(EventCapture, _Component);\n\n  function EventCapture(props) {\n    _classCallCheck(this, EventCapture);\n\n    var _this = _possibleConstructorReturn(this, (EventCapture.__proto__ || Object.getPrototypeOf(EventCapture)).call(this, props));\n\n    _this.handleEnter = _this.handleEnter.bind(_this);\n    _this.handleLeave = _this.handleLeave.bind(_this);\n    _this.handleWheel = _this.handleWheel.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handlePanEnd = _this.handlePanEnd.bind(_this);\n    _this.handlePan = _this.handlePan.bind(_this);\n    _this.handleTouchStart = _this.handleTouchStart.bind(_this);\n    _this.handleTouchMove = _this.handleTouchMove.bind(_this);\n    _this.handlePinchZoom = _this.handlePinchZoom.bind(_this);\n    _this.handlePinchZoomEnd = _this.handlePinchZoomEnd.bind(_this);\n    _this.handleClick = _this.handleClick.bind(_this);\n    _this.handleRightClick = _this.handleRightClick.bind(_this);\n    _this.handleDrag = _this.handleDrag.bind(_this);\n    _this.handleDragEnd = _this.handleDragEnd.bind(_this);\n    _this.shouldPan = _this.shouldPan.bind(_this);\n    _this.canPan = _this.canPan.bind(_this);\n    _this.setCursorClass = _this.setCursorClass.bind(_this);\n    _this.saveNode = _this.saveNode.bind(_this);\n    _this.mouseInside = false;\n    _this.mouseInteraction = true;\n    _this.state = {\n      panInProgress: false\n    };\n    return _this;\n  }\n\n  _createClass(EventCapture, [{\n    key: \"saveNode\",\n    value: function saveNode(node) {\n      this.node = node;\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.focus = this.props.focus;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.node) {\n        select(this.node).on(MOUSEENTER, this.handleEnter).on(MOUSELEAVE, this.handleLeave);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidMount();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.node) {\n        select(this.node).on(MOUSEENTER, null).on(MOUSELEAVE, null);\n        var win = d3Window(this.node);\n        select(win).on(MOUSEMOVE, null);\n      }\n    }\n  }, {\n    key: \"handleEnter\",\n    value: function handleEnter() {\n      var e = d3Event;\n      var onMouseEnter = this.props.onMouseEnter;\n      this.mouseInside = true;\n\n      if (!this.state.panInProgress && !this.state.dragInProgress) {\n        var win = d3Window(this.node);\n        select(win).on(MOUSEMOVE, this.handleMouseMove);\n      }\n\n      onMouseEnter(e);\n    }\n  }, {\n    key: \"handleLeave\",\n    value: function handleLeave(e) {\n      var onMouseLeave = this.props.onMouseLeave;\n      this.mouseInside = false;\n\n      if (!this.state.panInProgress && !this.state.dragInProgress) {\n        var win = d3Window(this.node);\n        select(win).on(MOUSEMOVE, null);\n      }\n\n      onMouseLeave(e);\n    }\n  }, {\n    key: \"handleWheel\",\n    value: function handleWheel(e) {\n      var _props = this.props,\n          zoom = _props.zoom,\n          onZoom = _props.onZoom;\n      var panInProgress = this.state.panInProgress;\n      var yZoom = Math.abs(e.deltaY) > Math.abs(e.deltaX) && Math.abs(e.deltaY) > 0; // const xPan = Math.abs(e.deltaY) < Math.abs(e.deltaX) && Math.abs(e.deltaX) > 0;\n\n      var mouseXY = mousePosition(e);\n      e.preventDefault();\n\n      if (zoom && this.focus && yZoom && !panInProgress) {\n        var zoomDir = e.deltaY > 0 ? 1 : -1;\n        onZoom(zoomDir, mouseXY, e);\n      } else if (this.focus) {\n        if (this.shouldPan()) {\n          // console.log(\"Do pan now...\")\n          // pan already in progress\n          var _state$panStart = this.state.panStart,\n              panStartXScale = _state$panStart.panStartXScale,\n              chartsToPan = _state$panStart.chartsToPan;\n          this.lastNewPos = mouseXY;\n          this.panHappened = true;\n          this.dx += e.deltaX;\n          this.dy += e.deltaY;\n          var dxdy = {\n            dx: this.dx,\n            dy: this.dy\n          };\n          this.props.onPan(mouseXY, panStartXScale, dxdy, chartsToPan, e);\n        } else {\n          // console.log(\"Pan start...\")\n          // pan start\n          var _props2 = this.props,\n              xScale = _props2.xScale,\n              chartConfig = _props2.chartConfig;\n          var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n          this.dx = 0;\n          this.dy = 0;\n          this.setState({\n            panInProgress: true,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: mouseXY,\n              chartsToPan: currentCharts\n            }\n          });\n        }\n\n        this.queuePanEnd();\n      }\n    }\n  }, {\n    key: \"queuePanEnd\",\n    value: function queuePanEnd() {\n      var _this2 = this;\n\n      if (isDefined(this.panEndTimeout)) {\n        clearTimeout(this.panEndTimeout);\n      }\n\n      this.panEndTimeout = setTimeout(function () {\n        _this2.handlePanEnd();\n      }, 100);\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove() {\n      var e = d3Event;\n      var _props3 = this.props,\n          onMouseMove = _props3.onMouseMove,\n          mouseMove = _props3.mouseMove;\n\n      if (this.mouseInteraction && mouseMove && !this.state.panInProgress) {\n        var newPos = mouse(this.node);\n        onMouseMove(newPos, \"mouse\", e);\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      var _this3 = this;\n\n      var mouseXY = mousePosition(e);\n      var _props4 = this.props,\n          onClick = _props4.onClick,\n          onDoubleClick = _props4.onDoubleClick;\n\n      if (!this.panHappened && !this.dragHappened) {\n        if (this.clicked) {\n          onDoubleClick(mouseXY, e);\n          this.clicked = false;\n        } else {\n          onClick(mouseXY, e);\n          this.clicked = true;\n          setTimeout(function () {\n            if (_this3.clicked) {\n              _this3.clicked = false;\n            }\n          }, 400);\n        }\n      }\n    }\n  }, {\n    key: \"handleRightClick\",\n    value: function handleRightClick(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var _props5 = this.props,\n          onContextMenu = _props5.onContextMenu,\n          onPanEnd = _props5.onPanEnd;\n      var mouseXY = mousePosition(e, this.node.getBoundingClientRect());\n\n      if (isDefined(this.state.panStart)) {\n        var _state$panStart2 = this.state.panStart,\n            panStartXScale = _state$panStart2.panStartXScale,\n            panOrigin = _state$panStart2.panOrigin,\n            chartsToPan = _state$panStart2.chartsToPan;\n\n        if (this.panHappened) {\n          onPanEnd(mouseXY, panStartXScale, panOrigin, chartsToPan, e);\n        }\n\n        var win = d3Window(this.node);\n        select(win).on(MOUSEMOVE, null).on(MOUSEUP, null);\n        this.setState({\n          panInProgress: false,\n          panStart: null\n        });\n      }\n\n      onContextMenu(mouseXY, e);\n    }\n  }, {\n    key: \"handleDrag\",\n    value: function handleDrag() {\n      var e = d3Event;\n\n      if (this.props.onDrag) {\n        this.dragHappened = true;\n        var mouseXY = mouse(this.node);\n        this.props.onDrag({\n          startPos: this.state.dragStartPosition,\n          mouseXY: mouseXY\n        }, e);\n      }\n    }\n  }, {\n    key: \"cancelDrag\",\n    value: function cancelDrag() {\n      var win = d3Window(this.node);\n      select(win).on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null);\n      this.setState({\n        dragInProgress: false\n      });\n      this.mouseInteraction = true;\n    }\n  }, {\n    key: \"handleDragEnd\",\n    value: function handleDragEnd() {\n      var e = d3Event;\n      var mouseXY = mouse(this.node);\n      var win = d3Window(this.node);\n      select(win).on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null);\n\n      if (this.dragHappened) {\n        this.props.onDragComplete({\n          mouseXY: mouseXY\n        }, e);\n      }\n\n      this.setState({\n        dragInProgress: false\n      });\n      this.mouseInteraction = true;\n    }\n  }, {\n    key: \"canPan\",\n    value: function canPan() {\n      var getAllPanConditions = this.props.getAllPanConditions;\n      var initialPanEnabled = this.props.pan;\n\n      var _getAllPanConditions$ = getAllPanConditions().reduce(function (returnObj, a) {\n        return {\n          draggable: returnObj.draggable || a.draggable,\n          panEnabled: returnObj.panEnabled && a.panEnabled\n        };\n      }, {\n        draggable: false,\n        panEnabled: initialPanEnabled\n      }),\n          panEnabled = _getAllPanConditions$.panEnabled,\n          somethingSelected = _getAllPanConditions$.draggable;\n\n      return {\n        panEnabled: panEnabled,\n        somethingSelected: somethingSelected\n      };\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(e) {\n      if (e.button !== 0) {\n        return;\n      }\n\n      var _props6 = this.props,\n          xScale = _props6.xScale,\n          chartConfig = _props6.chartConfig,\n          onMouseDown = _props6.onMouseDown;\n      this.panHappened = false;\n      this.dragHappened = false;\n      this.focus = true;\n\n      if (!this.state.panInProgress && this.mouseInteraction) {\n        var mouseXY = mousePosition(e);\n        var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\n        var _canPan = this.canPan(),\n            panEnabled = _canPan.panEnabled,\n            somethingSelected = _canPan.somethingSelected;\n\n        var pan = panEnabled && !somethingSelected;\n\n        if (pan) {\n          this.setState({\n            panInProgress: pan,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: mouseXY,\n              chartsToPan: currentCharts\n            }\n          });\n          var win = d3Window(this.node);\n          select(win).on(MOUSEMOVE, this.handlePan).on(MOUSEUP, this.handlePanEnd);\n        } else if (somethingSelected) {\n          this.setState({\n            panInProgress: false,\n            dragInProgress: true,\n            panStart: null,\n            dragStartPosition: mouseXY\n          });\n          this.props.onDragStart({\n            startPos: mouseXY\n          }, e); // this.mouseInteraction = false;\n\n          var _win = d3Window(this.node);\n\n          select(_win).on(MOUSEMOVE, this.handleDrag).on(MOUSEUP, this.handleDragEnd);\n        }\n\n        onMouseDown(mouseXY, currentCharts, e);\n      }\n\n      e.preventDefault();\n    }\n  }, {\n    key: \"shouldPan\",\n    value: function shouldPan() {\n      var _props7 = this.props,\n          panEnabled = _props7.pan,\n          onPan = _props7.onPan;\n      return panEnabled && onPan && isDefined(this.state.panStart);\n    }\n  }, {\n    key: \"handlePan\",\n    value: function handlePan() {\n      var e = d3Event;\n\n      if (this.shouldPan()) {\n        this.panHappened = true;\n        var _state$panStart3 = this.state.panStart,\n            panStartXScale = _state$panStart3.panStartXScale,\n            panOrigin = _state$panStart3.panOrigin,\n            chartsToPan = _state$panStart3.chartsToPan;\n        var mouseXY = this.mouseInteraction ? mouse(this.node) : touches(this.node)[0];\n        this.lastNewPos = mouseXY;\n        var dx = mouseXY[0] - panOrigin[0];\n        var dy = mouseXY[1] - panOrigin[1];\n        this.dx = dx;\n        this.dy = dy;\n        this.props.onPan(mouseXY, panStartXScale, {\n          dx: dx,\n          dy: dy\n        }, chartsToPan, e);\n      }\n    }\n  }, {\n    key: \"handlePanEnd\",\n    value: function handlePanEnd() {\n      var e = d3Event;\n      var _props8 = this.props,\n          panEnabled = _props8.pan,\n          onPanEnd = _props8.onPanEnd;\n\n      if (isDefined(this.state.panStart)) {\n        var _state$panStart4 = this.state.panStart,\n            panStartXScale = _state$panStart4.panStartXScale,\n            chartsToPan = _state$panStart4.chartsToPan;\n        var win = d3Window(this.node);\n        select(win).on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null).on(TOUCHMOVE, null).on(TOUCHEND, null);\n\n        if (this.panHappened // && !this.contextMenuClicked\n        && panEnabled && onPanEnd) {\n          var dx = this.dx,\n              dy = this.dy; // console.log(dx, dy)\n\n          delete this.dx;\n          delete this.dy;\n          onPanEnd(this.lastNewPos, panStartXScale, {\n            dx: dx,\n            dy: dy\n          }, chartsToPan, e);\n        }\n\n        this.setState({\n          panInProgress: false,\n          panStart: null\n        });\n      }\n    }\n  }, {\n    key: \"handleTouchMove\",\n    value: function handleTouchMove(e) {\n      var onMouseMove = this.props.onMouseMove;\n      var touchXY = touchPosition(getTouchProps(e.touches[0]), e);\n      onMouseMove(touchXY, \"touch\", e);\n    }\n  }, {\n    key: \"handleTouchStart\",\n    value: function handleTouchStart(e) {\n      this.mouseInteraction = false;\n      var _props9 = this.props,\n          panEnabled = _props9.pan,\n          chartConfig = _props9.chartConfig,\n          onMouseMove = _props9.onMouseMove;\n      var _props10 = this.props,\n          xScale = _props10.xScale,\n          onPanEnd = _props10.onPanEnd;\n\n      if (e.touches.length === 1) {\n        this.panHappened = false;\n        var touchXY = touchPosition(getTouchProps(e.touches[0]), e);\n        onMouseMove(touchXY, \"touch\", e);\n\n        if (panEnabled) {\n          var currentCharts = getCurrentCharts(chartConfig, touchXY);\n          this.setState({\n            panInProgress: true,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: touchXY,\n              chartsToPan: currentCharts\n            }\n          });\n          var win = d3Window(this.node);\n          select(win).on(TOUCHMOVE, this.handlePan, false).on(TOUCHEND, this.handlePanEnd, false);\n        }\n      } else if (e.touches.length === 2) {\n        // pinch zoom begin\n        // do nothing pinch zoom is handled in handleTouchMove\n        var _state = this.state,\n            panInProgress = _state.panInProgress,\n            panStart = _state.panStart;\n\n        if (panInProgress && panEnabled && onPanEnd) {\n          var panStartXScale = panStart.panStartXScale,\n              panOrigin = panStart.panOrigin,\n              chartsToPan = panStart.chartsToPan;\n\n          var _win2 = d3Window(this.node);\n\n          select(_win2).on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null).on(TOUCHMOVE, this.handlePinchZoom, false).on(TOUCHEND, this.handlePinchZoomEnd, false);\n          var touch1Pos = touchPosition(getTouchProps(e.touches[0]), e);\n          var touch2Pos = touchPosition(getTouchProps(e.touches[1]), e);\n\n          if (this.panHappened // && !this.contextMenuClicked\n          && panEnabled && onPanEnd) {\n            onPanEnd(this.lastNewPos, panStartXScale, panOrigin, chartsToPan, e);\n          }\n\n          this.setState({\n            panInProgress: false,\n            pinchZoomStart: {\n              xScale: xScale,\n              touch1Pos: touch1Pos,\n              touch2Pos: touch2Pos,\n              range: xScale.range(),\n              chartsToPan: chartsToPan\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"handlePinchZoom\",\n    value: function handlePinchZoom() {\n      var e = d3Event;\n\n      var _touches = touches(this.node),\n          _touches2 = _slicedToArray(_touches, 2),\n          touch1Pos = _touches2[0],\n          touch2Pos = _touches2[1];\n\n      var _props11 = this.props,\n          xScale = _props11.xScale,\n          zoomEnabled = _props11.zoom,\n          onPinchZoom = _props11.onPinchZoom; // eslint-disable-next-line no-unused-vars\n\n      var _state$pinchZoomStart = this.state.pinchZoomStart,\n          chartsToPan = _state$pinchZoomStart.chartsToPan,\n          initialPinch = _objectWithoutProperties(_state$pinchZoomStart, [\"chartsToPan\"]);\n\n      if (zoomEnabled && onPinchZoom) {\n        onPinchZoom(initialPinch, {\n          touch1Pos: touch1Pos,\n          touch2Pos: touch2Pos,\n          xScale: xScale\n        }, e);\n      }\n    }\n  }, {\n    key: \"handlePinchZoomEnd\",\n    value: function handlePinchZoomEnd() {\n      var e = d3Event;\n      var win = d3Window(this.node);\n      select(win).on(TOUCHMOVE, null).on(TOUCHEND, null);\n      var _props12 = this.props,\n          zoomEnabled = _props12.zoom,\n          onPinchZoomEnd = _props12.onPinchZoomEnd; // eslint-disable-next-line no-unused-vars\n\n      var _state$pinchZoomStart2 = this.state.pinchZoomStart,\n          chartsToPan = _state$pinchZoomStart2.chartsToPan,\n          initialPinch = _objectWithoutProperties(_state$pinchZoomStart2, [\"chartsToPan\"]);\n\n      if (zoomEnabled && onPinchZoomEnd) {\n        onPinchZoomEnd(initialPinch, e);\n      }\n\n      this.setState({\n        pinchZoomStart: null\n      });\n    }\n  }, {\n    key: \"setCursorClass\",\n    value: function setCursorClass(cursorOverrideClass) {\n      if (cursorOverrideClass !== this.state.cursorOverrideClass) {\n        this.setState({\n          cursorOverrideClass: cursorOverrideClass\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props13 = this.props,\n          height = _props13.height,\n          width = _props13.width,\n          disableInteraction = _props13.disableInteraction,\n          useCrossHairStyleCursor = _props13.useCrossHairStyleCursor;\n      var className = this.state.cursorOverrideClass != null ? this.state.cursorOverrideClass : !useCrossHairStyleCursor ? \"\" : this.state.panInProgress ? \"react-stockcharts-grabbing-cursor\" : \"react-stockcharts-crosshair-cursor\";\n      var interactionProps = disableInteraction || {\n        onWheel: this.handleWheel,\n        onMouseDown: this.handleMouseDown,\n        onClick: this.handleClick,\n        onContextMenu: this.handleRightClick,\n        onTouchStart: this.handleTouchStart,\n        onTouchMove: this.handleTouchMove\n      };\n      return React.createElement(\"rect\", _extends({\n        ref: this.saveNode,\n        className: className,\n        width: width,\n        height: height,\n        style: {\n          opacity: 0\n        }\n      }, interactionProps));\n    }\n  }]);\n\n  return EventCapture;\n}(Component); // \t\t\t\tonMouseEnter={this.handleEnter}\n//\t\t\t\tonMouseLeave={this.handleLeave}\n\n\nEventCapture.propTypes = {\n  mouseMove: PropTypes.bool.isRequired,\n  zoom: PropTypes.bool.isRequired,\n  pan: PropTypes.bool.isRequired,\n  panSpeedMultiplier: PropTypes.number.isRequired,\n  focus: PropTypes.bool.isRequired,\n  useCrossHairStyleCursor: PropTypes.bool.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  chartConfig: PropTypes.array,\n  xScale: PropTypes.func.isRequired,\n  xAccessor: PropTypes.func.isRequired,\n  disableInteraction: PropTypes.bool.isRequired,\n  getAllPanConditions: PropTypes.func.isRequired,\n  onMouseMove: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onZoom: PropTypes.func,\n  onPinchZoom: PropTypes.func,\n  onPinchZoomEnd: PropTypes.func.isRequired,\n  onPan: PropTypes.func,\n  onPanEnd: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDrag: PropTypes.func,\n  onDragComplete: PropTypes.func,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  children: PropTypes.node\n};\nEventCapture.defaultProps = {\n  mouseMove: false,\n  zoom: false,\n  pan: false,\n  panSpeedMultiplier: 1,\n  focus: false,\n  onDragComplete: noop,\n  disableInteraction: false\n};\nexport default EventCapture;","map":null,"metadata":{},"sourceType":"module"}