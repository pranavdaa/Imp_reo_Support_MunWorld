{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n}; // import { map as d3Map } from \"d3-collection\";\n\n\nexports.discontinuousTimeScaleProviderBuilder = discontinuousTimeScaleProviderBuilder;\n\nvar _d3TimeFormat = require(\"d3-time-format\");\n\nvar _financeDiscontinuousScale = require(\"./financeDiscontinuousScale\");\n\nvar _financeDiscontinuousScale2 = _interopRequireDefault(_financeDiscontinuousScale);\n\nvar _utils = require(\"../utils\");\n\nvar _levels = require(\"./levels\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction evaluateLevel(d, date, i, formatters) {\n  return _levels.levelDefinition.map(function (eachLevel, idx) {\n    return {\n      level: _levels.levelDefinition.length - idx - 1,\n      format: formatters[eachLevel(d, date, i)]\n    };\n  }).find(function (l) {\n    return !!l.format;\n  });\n}\n\nvar discontinuousIndexCalculator = (0, _utils.slidingWindow)().windowSize(2).undefinedValue(function (d, idx, _ref) {\n  var initialIndex = _ref.initialIndex,\n      formatters = _ref.formatters;\n  var i = initialIndex;\n  var row = {\n    date: d.getTime(),\n    startOf30Seconds: false,\n    startOfMinute: false,\n    startOf5Minutes: false,\n    startOf15Minutes: false,\n    startOf30Minutes: false,\n    startOfHour: false,\n    startOfEighthOfADay: false,\n    startOfQuarterDay: false,\n    startOfHalfDay: false,\n    startOfDay: true,\n    startOfWeek: false,\n    startOfMonth: false,\n    startOfQuarter: false,\n    startOfYear: false\n  };\n  var level = evaluateLevel(row, d, i, formatters);\n  return _extends({}, row, {\n    index: i\n  }, level);\n});\nvar discontinuousIndexCalculatorLocalTime = discontinuousIndexCalculator.accumulator(function (_ref2, i, idx, _ref3) {\n  var _ref4 = _slicedToArray(_ref2, 2),\n      prevDate = _ref4[0],\n      nowDate = _ref4[1];\n\n  var initialIndex = _ref3.initialIndex,\n      formatters = _ref3.formatters;\n  var startOf30Seconds = nowDate.getSeconds() % 30 === 0;\n  var startOfMinute = nowDate.getMinutes() !== prevDate.getMinutes();\n  var startOf5Minutes = startOfMinute && nowDate.getMinutes() % 5 <= prevDate.getMinutes() % 5;\n  var startOf15Minutes = startOfMinute && nowDate.getMinutes() % 15 <= prevDate.getMinutes() % 15;\n  var startOf30Minutes = startOfMinute && nowDate.getMinutes() % 30 <= prevDate.getMinutes() % 30;\n  var startOfHour = nowDate.getHours() !== prevDate.getHours();\n  var startOfEighthOfADay = startOfHour && nowDate.getHours() % 3 === 0;\n  var startOfQuarterDay = startOfHour && nowDate.getHours() % 6 === 0;\n  var startOfHalfDay = startOfHour && nowDate.getHours() % 12 === 0;\n  var startOfDay = nowDate.getDay() !== prevDate.getDay(); // According to ISO calendar\n  // Sunday = 0, Monday = 1, ... Saturday = 6\n  // day of week of today < day of week of yesterday then today is start of week\n\n  var startOfWeek = nowDate.getDay() < prevDate.getDay(); // month of today != month of yesterday then today is start of month\n\n  var startOfMonth = nowDate.getMonth() !== prevDate.getMonth(); // if start of month and month % 3 === 0 then it is start of quarter\n\n  var startOfQuarter = startOfMonth && nowDate.getMonth() % 3 <= prevDate.getMonth() % 3; // year of today != year of yesterday then today is start of year\n\n  var startOfYear = nowDate.getFullYear() !== prevDate.getFullYear();\n  var row = {\n    date: nowDate.getTime(),\n    startOf30Seconds: startOf30Seconds,\n    startOfMinute: startOfMinute,\n    startOf5Minutes: startOf5Minutes,\n    startOf15Minutes: startOf15Minutes,\n    startOf30Minutes: startOf30Minutes,\n    startOfHour: startOfHour,\n    startOfEighthOfADay: startOfEighthOfADay,\n    startOfQuarterDay: startOfQuarterDay,\n    startOfHalfDay: startOfHalfDay,\n    startOfDay: startOfDay,\n    startOfWeek: startOfWeek,\n    startOfMonth: startOfMonth,\n    startOfQuarter: startOfQuarter,\n    startOfYear: startOfYear\n  };\n  var level = evaluateLevel(row, nowDate, i, formatters);\n\n  if (level == null) {\n    console.log(row);\n  }\n\n  return _extends({}, row, {\n    index: i + initialIndex\n  }, level);\n});\n\nfunction doStuff(realDateAccessor, inputDateAccessor, initialIndex, formatters) {\n  return function (data) {\n    var dateAccessor = realDateAccessor(inputDateAccessor);\n    var calculate = discontinuousIndexCalculatorLocalTime.source(dateAccessor).misc({\n      initialIndex: initialIndex,\n      formatters: formatters\n    });\n    var index = calculate(data).map(function (each) {\n      var format = each.format;\n      return {\n        // ...each,\n        index: each.index,\n        level: each.level,\n        date: new Date(each.date),\n        format: (0, _d3TimeFormat.timeFormat)(format)\n      };\n    });\n    /*\n    var map = d3Map();\n    for (var i = 0; i < data.length - 1; i++) {\n    \t\tvar nextDate = dateAccessor(data[i + 1]);\n    \tvar nowDate = dateAccessor(data[i]);\n    \tvar diff = nextDate - nowDate;\n    \t\tif (map.has(diff)) {\n    \t\tvar count = parseInt(map.get(diff), 10) + 1;\n    \t\tmap.set(diff, count);\n    \t} else {\n    \t\tmap.set(diff, 1);\n    \t}\n    }\n    \tvar entries = map.entries().sort((a, b) => a.value < b.value);\n    \t// For Renko/p&f\n    \tvar interval = entries[0].value === 1\n    \t? Math.round((dateAccessor(last(data)) - dateAccessor(head(data))) / data.length)\n    \t: parseInt(entries[0].key, 10); */\n    // return { index, interval };\n\n    return {\n      index: index\n    };\n  };\n}\n\nfunction discontinuousTimeScaleProviderBuilder() {\n  var initialIndex = 0,\n      realDateAccessor = _utils.identity;\n\n  var inputDateAccessor = function inputDateAccessor(d) {\n    return d.date;\n  },\n      indexAccessor = function indexAccessor(d) {\n    return d.idx;\n  },\n      indexMutator = function indexMutator(d, idx) {\n    return _extends({}, d, {\n      idx: idx\n    });\n  },\n      withIndex = void 0;\n\n  var currentFormatters = _levels.defaultFormatters; // eslint-disable-next-line prefer-const\n\n  var discontinuousTimeScaleProvider = function discontinuousTimeScaleProvider(data) {\n    /*\n    console.warn(\"Are you sure you want to use a discontinuousTimeScale?\"\n    \t+ \" Use this only if you have discontinuous data which\"\n    \t+ \" needs to be displayed as continuous.\"\n    \t+ \" If you have continuous data use a d3 scale like\"\n    \t+ \" `d3.scaleTime`\"\n    );\n    */\n    var index = withIndex;\n\n    if ((0, _utils.isNotDefined)(index)) {\n      var response = doStuff(realDateAccessor, inputDateAccessor, initialIndex, currentFormatters)(data);\n      index = response.index;\n    } // console.log(interval, entries[0].key);\n\n\n    var inputIndex = index;\n    var xScale = (0, _financeDiscontinuousScale2.default)(inputIndex);\n    var mergedData = (0, _utils.zipper)().combine(indexMutator);\n    var finalData = mergedData(data, inputIndex);\n    return {\n      data: finalData,\n      xScale: xScale,\n      xAccessor: function xAccessor(d) {\n        return d && indexAccessor(d).index;\n      },\n      displayXAccessor: realDateAccessor(inputDateAccessor)\n    };\n  };\n\n  discontinuousTimeScaleProvider.initialIndex = function (x) {\n    if (!arguments.length) {\n      return initialIndex;\n    }\n\n    initialIndex = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.inputDateAccessor = function (x) {\n    if (!arguments.length) {\n      return inputDateAccessor;\n    }\n\n    inputDateAccessor = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.indexAccessor = function (x) {\n    if (!arguments.length) {\n      return indexAccessor;\n    }\n\n    indexAccessor = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.indexMutator = function (x) {\n    if (!arguments.length) {\n      return indexMutator;\n    }\n\n    indexMutator = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.withIndex = function (x) {\n    if (!arguments.length) {\n      return withIndex;\n    }\n\n    withIndex = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.utc = function () {\n    realDateAccessor = function realDateAccessor(dateAccessor) {\n      return function (d) {\n        var date = dateAccessor(d); // The getTimezoneOffset() method returns the time-zone offset from UTC, in minutes, for the current locale.\n\n        var offsetInMillis = date.getTimezoneOffset() * 60 * 1000;\n        return new Date(date.getTime() + offsetInMillis);\n      };\n    };\n\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.setLocale = function (locale) {\n    var formatters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (locale) {\n      (0, _d3TimeFormat.timeFormatDefaultLocale)(locale);\n    }\n\n    if (formatters) {\n      currentFormatters = formatters;\n    }\n\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.indexCalculator = function () {\n    return doStuff(realDateAccessor, inputDateAccessor, initialIndex, currentFormatters);\n  };\n\n  return discontinuousTimeScaleProvider;\n}\n/* discontinuousTimeScaleProvider.utc = function(data,\n\t\tdateAccessor,\n\t\tindexAccessor,\n\t\tindexMutator) {\n\tvar utcDateAccessor = d => {\n\t\tvar date = dateAccessor(d);\n\t\t// The getTimezoneOffset() method returns the time-zone offset from UTC, in minutes, for the current locale.\n\t\tvar offsetInMillis = date.getTimezoneOffset() * 60 * 1000;\n\t\treturn new Date(date.getTime() + offsetInMillis);\n\t};\n\treturn discontinuousTimeScaleProvider(data, utcDateAccessor, indexAccessor, indexMutator);\n};*/\n\n\nexports.default = discontinuousTimeScaleProviderBuilder();","map":null,"metadata":{},"sourceType":"script"}