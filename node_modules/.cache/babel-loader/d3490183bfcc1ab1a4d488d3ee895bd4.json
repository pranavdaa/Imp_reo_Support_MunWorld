{"ast":null,"code":"import _regeneratorRuntime from \"/home/pmaheshwari/Desktop/TowardsStartUp/MunWorld/cleanui-admin-template-react-cra/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport \"antd/es/notification/style\";\nimport _notification from \"antd/es/notification\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(LOGIN),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(LOAD_CURRENT_ACCOUNT),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(LOGOUT),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, put, call } from 'redux-saga/effects';\nimport { login, currentAccount, logout } from 'services/user';\nimport actions from './actions';\nexport function LOGIN(_ref) {\n  var payload, email, password, success;\n  return _regeneratorRuntime.wrap(function LOGIN$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          email = payload.email, password = payload.password;\n          _context.next = 4;\n          return put({\n            type: 'user/SET_STATE',\n            payload: {\n              loading: true\n            }\n          });\n\n        case 4:\n          _context.next = 6;\n          return call(login, email, password);\n\n        case 6:\n          success = _context.sent;\n\n          if (!success) {\n            _context.next = 11;\n            break;\n          }\n\n          _notification.success({\n            message: 'Logged In',\n            description: 'You have successfully logged in to Clean UI React Admin Template!'\n          });\n\n          _context.next = 11;\n          return put({\n            type: 'user/LOAD_CURRENT_ACCOUNT'\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function LOAD_CURRENT_ACCOUNT() {\n  var response, id, email, avatar;\n  return _regeneratorRuntime.wrap(function LOAD_CURRENT_ACCOUNT$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return put({\n            type: 'user/SET_STATE',\n            payload: {\n              loading: true\n            }\n          });\n\n        case 2:\n          _context2.next = 4;\n          return call(currentAccount);\n\n        case 4:\n          response = _context2.sent;\n\n          if (!response) {\n            _context2.next = 9;\n            break;\n          }\n\n          id = response.uid, email = response.email, avatar = response.photoURL;\n          _context2.next = 9;\n          return put({\n            type: 'user/SET_STATE',\n            payload: {\n              id: id,\n              name: 'Administrator',\n              email: email,\n              avatar: avatar,\n              role: 'admin',\n              authorized: true\n            }\n          });\n\n        case 9:\n          _context2.next = 11;\n          return put({\n            type: 'user/SET_STATE',\n            payload: {\n              loading: false\n            }\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function LOGOUT() {\n  return _regeneratorRuntime.wrap(function LOGOUT$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return call(logout);\n\n        case 2:\n          _context3.next = 4;\n          return put({\n            type: 'user/SET_STATE',\n            payload: {\n              id: '',\n              name: '',\n              role: '',\n              email: '',\n              avatar: '',\n              authorized: false,\n              loading: false\n            }\n          });\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([takeEvery(actions.LOGIN, LOGIN), takeEvery(actions.LOAD_CURRENT_ACCOUNT, LOAD_CURRENT_ACCOUNT), takeEvery(actions.LOGOUT, LOGOUT), LOAD_CURRENT_ACCOUNT() // run once on app load to check user auth\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/home/pmaheshwari/Desktop/TowardsStartUp/MunWorld/cleanui-admin-template-react-cra/src/redux/user/sagas.js"],"names":["LOGIN","LOAD_CURRENT_ACCOUNT","LOGOUT","rootSaga","all","takeEvery","put","call","login","currentAccount","logout","actions","payload","email","password","type","loading","success","message","description","response","id","uid","avatar","photoURL","name","role","authorized"],"mappings":"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","sourcesContent":["import { all, takeEvery, put, call } from 'redux-saga/effects'\nimport { notification } from 'antd'\nimport { login, currentAccount, logout } from 'services/user'\nimport actions from './actions'\n\nexport function* LOGIN({ payload }) {\n  const { email, password } = payload\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: true,\n    },\n  })\n  const success = yield call(login, email, password)\n  if (success) {\n    notification.success({\n      message: 'Logged In',\n      description: 'You have successfully logged in to Clean UI React Admin Template!',\n    })\n    yield put({\n      type: 'user/LOAD_CURRENT_ACCOUNT',\n    })\n  }\n}\n\nexport function* LOAD_CURRENT_ACCOUNT() {\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: true,\n    },\n  })\n  const response = yield call(currentAccount)\n  if (response) {\n    const { uid: id, email, photoURL: avatar } = response\n    yield put({\n      type: 'user/SET_STATE',\n      payload: {\n        id,\n        name: 'Administrator',\n        email,\n        avatar,\n        role: 'admin',\n        authorized: true,\n      },\n    })\n  }\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: false,\n    },\n  })\n}\n\nexport function* LOGOUT() {\n  yield call(logout)\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      id: '',\n      name: '',\n      role: '',\n      email: '',\n      avatar: '',\n      authorized: false,\n      loading: false,\n    },\n  })\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(actions.LOGIN, LOGIN),\n    takeEvery(actions.LOAD_CURRENT_ACCOUNT, LOAD_CURRENT_ACCOUNT),\n    takeEvery(actions.LOGOUT, LOGOUT),\n    LOAD_CURRENT_ACCOUNT(), // run once on app load to check user auth\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}