{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\"; // import { mean } from \"d3-array\";\n\nimport { path as d3Path } from \"d3-path\";\nimport { interpolateNumber } from \"d3-interpolate\";\nimport { last, noop } from \"./utils\";\n\nvar ZoomButtons = function (_Component) {\n  _inherits(ZoomButtons, _Component);\n\n  function ZoomButtons(props) {\n    _classCallCheck(this, ZoomButtons);\n\n    var _this = _possibleConstructorReturn(this, (ZoomButtons.__proto__ || Object.getPrototypeOf(ZoomButtons)).call(this, props));\n\n    _this.handleZoomOut = _this.handleZoomOut.bind(_this);\n    _this.handleZoomIn = _this.handleZoomIn.bind(_this);\n    _this.zoom = _this.zoom.bind(_this);\n    return _this;\n  }\n\n  _createClass(ZoomButtons, [{\n    key: \"zoom\",\n    value: function zoom(direction) {\n      var _this2 = this;\n\n      var _context = this.context,\n          xAxisZoom = _context.xAxisZoom,\n          xScale = _context.xScale,\n          plotData = _context.plotData,\n          xAccessor = _context.xAccessor;\n      var cx = xScale(xAccessor(last(plotData))); // mean(xScale.range());\n\n      var zoomMultiplier = this.props.zoomMultiplier;\n      var c = direction > 0 ? 1 * zoomMultiplier : 1 / zoomMultiplier;\n\n      var _xScale$domain = xScale.domain(),\n          _xScale$domain2 = _slicedToArray(_xScale$domain, 2),\n          start = _xScale$domain2[0],\n          end = _xScale$domain2[1];\n\n      var _xScale$range$map$map = xScale.range().map(function (x) {\n        return cx + (x - cx) * c;\n      }).map(xScale.invert),\n          _xScale$range$map$map2 = _slicedToArray(_xScale$range$map$map, 2),\n          newStart = _xScale$range$map$map2[0],\n          newEnd = _xScale$range$map$map2[1];\n\n      var left = interpolateNumber(start, newStart);\n      var right = interpolateNumber(end, newEnd);\n      var foo = [0.25, 0.3, 0.5, 0.6, 0.75, 1].map(function (i) {\n        return [left(i), right(i)];\n      });\n      this.interval = setInterval(function () {\n        xAxisZoom(foo.shift());\n\n        if (foo.length === 0) {\n          clearInterval(_this2.interval);\n          delete _this2.interval;\n        }\n      }, 10);\n    }\n  }, {\n    key: \"handleZoomOut\",\n    value: function handleZoomOut() {\n      if (this.interval) return;\n      this.zoom(1);\n    }\n  }, {\n    key: \"handleZoomIn\",\n    value: function handleZoomIn() {\n      if (this.interval) return;\n      this.zoom(-1);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var chartConfig = this.context.chartConfig;\n      var width = chartConfig.width,\n          height = chartConfig.height;\n      var _props = this.props,\n          size = _props.size,\n          heightFromBase = _props.heightFromBase,\n          rx = _props.rx,\n          ry = _props.ry;\n      var _props2 = this.props,\n          stroke = _props2.stroke,\n          strokeOpacity = _props2.strokeOpacity,\n          fill = _props2.fill,\n          strokeWidth = _props2.strokeWidth,\n          fillOpacity = _props2.fillOpacity;\n      var _props3 = this.props,\n          textFill = _props3.textFill,\n          textStrokeWidth = _props3.textStrokeWidth;\n      var onReset = this.props.onReset;\n      var centerX = Math.round(width / 2);\n      var y = height - heightFromBase;\n\n      var _size = _slicedToArray(size, 2),\n          w = _size[0],\n          h = _size[1];\n\n      var hLength = 5;\n      var wLength = 6;\n      var textY = Math.round(y + h / 2);\n      var resetX = centerX;\n      var zoomOut = d3Path();\n      var zoomOutX = centerX - w - 2 * strokeWidth;\n      zoomOut.moveTo(zoomOutX - wLength, textY);\n      zoomOut.lineTo(zoomOutX + wLength, textY);\n      zoomOut.closePath();\n      var zoomIn = d3Path();\n      var zoomInX = centerX + w + 2 * strokeWidth;\n      zoomIn.moveTo(zoomInX - wLength, textY);\n      zoomIn.lineTo(zoomInX + wLength, textY);\n      zoomIn.moveTo(zoomInX, textY - hLength);\n      zoomIn.lineTo(zoomInX, textY + hLength); // zoomIn.closePath();\n\n      return React.createElement(\"g\", {\n        className: \"react-stockcharts-zoom-button\"\n      }, React.createElement(\"rect\", {\n        x: zoomOutX - w / 2,\n        y: y,\n        rx: rx,\n        ry: ry,\n        height: h,\n        width: w,\n        fill: fill,\n        fillOpacity: fillOpacity,\n        stroke: stroke,\n        strokeOpacity: strokeOpacity,\n        strokeWidth: strokeWidth\n      }), React.createElement(\"path\", {\n        d: zoomOut.toString(),\n        stroke: textFill,\n        strokeWidth: textStrokeWidth\n      }), React.createElement(\"rect\", {\n        x: resetX - w / 2,\n        y: y,\n        rx: rx,\n        ry: ry,\n        height: h,\n        width: w,\n        fill: fill,\n        fillOpacity: fillOpacity,\n        stroke: stroke,\n        strokeOpacity: strokeOpacity,\n        strokeWidth: strokeWidth\n      }), React.createElement(\"g\", {\n        transform: \"translate (\" + resetX + \", \" + (y + h / 4) + \") scale(.14)\"\n      }, React.createElement(\"path\", {\n        d: \"M31 13C23.4 5.3 12.8.5 1.1.5c-23.3 0-42.3 19-42.3 42.5s18.9 42.5 42.3 42.5c13.8 0 26-6.6 33.7-16.9l-16.5-1.8C13.5 70.4 7.5 72.5 1 72.5c-16.2 0-29.3-13.2-29.3-29.4S-15.2 13.7 1 13.7c8.1 0 15.4 3.3 20.7 8.6l-10.9 11h32.5V.5L31 13z\",\n        fill: textFill\n      })), React.createElement(\"rect\", {\n        x: zoomInX - w / 2,\n        y: y,\n        rx: rx,\n        ry: ry,\n        height: h,\n        width: w,\n        fill: fill,\n        fillOpacity: fillOpacity,\n        stroke: stroke,\n        strokeOpacity: strokeOpacity,\n        strokeWidth: strokeWidth\n      }), React.createElement(\"path\", {\n        d: zoomIn.toString(),\n        stroke: textFill,\n        strokeWidth: textStrokeWidth\n      }), React.createElement(\"rect\", {\n        className: \"react-stockcharts-enable-interaction out\",\n        onClick: this.handleZoomOut,\n        x: zoomOutX - w / 2,\n        y: y,\n        rx: rx,\n        ry: ry,\n        height: h,\n        width: w,\n        fill: \"none\"\n      }), React.createElement(\"rect\", {\n        className: \"react-stockcharts-enable-interaction reset\",\n        onClick: onReset,\n        x: resetX - w / 2,\n        y: y,\n        rx: rx,\n        ry: ry,\n        height: h,\n        width: w,\n        fill: \"none\"\n      }), React.createElement(\"rect\", {\n        className: \"react-stockcharts-enable-interaction in\",\n        onClick: this.handleZoomIn,\n        x: zoomInX - w / 2,\n        y: y,\n        rx: rx,\n        ry: ry,\n        height: h,\n        width: w,\n        fill: \"none\"\n      }));\n    }\n  }]);\n\n  return ZoomButtons;\n}(Component);\n\nZoomButtons.propTypes = {\n  zoomMultiplier: PropTypes.number.isRequired,\n  size: PropTypes.array.isRequired,\n  heightFromBase: PropTypes.number.isRequired,\n  rx: PropTypes.number.isRequired,\n  ry: PropTypes.number.isRequired,\n  stroke: PropTypes.string.isRequired,\n  strokeWidth: PropTypes.number.isRequired,\n  strokeOpacity: PropTypes.number.isRequired,\n  fill: PropTypes.string.isRequired,\n  fillOpacity: PropTypes.number.isRequired,\n  fontSize: PropTypes.number.isRequired,\n  textDy: PropTypes.string.isRequired,\n  textFill: PropTypes.string.isRequired,\n  textStrokeWidth: PropTypes.number.isRequired,\n  onReset: PropTypes.func\n};\nZoomButtons.defaultProps = {\n  size: [30, 24],\n  heightFromBase: 50,\n  rx: 3,\n  ry: 3,\n  stroke: \"#000000\",\n  strokeOpacity: 0.3,\n  strokeWidth: 1,\n  fill: \"#D6D6D6\",\n  fillOpacity: 0.4,\n  fontSize: 16,\n  textDy: \".3em\",\n  textFill: \"#000000\",\n  textStrokeWidth: 2,\n  zoomMultiplier: 1.5,\n  onReset: noop\n};\nZoomButtons.contextTypes = {\n  xScale: PropTypes.func.isRequired,\n  chartConfig: PropTypes.object.isRequired,\n  plotData: PropTypes.array.isRequired,\n  xAccessor: PropTypes.func.isRequired,\n  xAxisZoom: PropTypes.func.isRequired\n};\nexport default ZoomButtons;","map":null,"metadata":{},"sourceType":"module"}