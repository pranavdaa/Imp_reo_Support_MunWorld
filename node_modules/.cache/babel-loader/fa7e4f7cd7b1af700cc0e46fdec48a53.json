{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _d3Shape = require(\"d3-shape\");\n\nvar _GenericChartComponent = require(\"../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _GenericComponent = require(\"../GenericComponent\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar LineSeries = function (_Component) {\n  _inherits(LineSeries, _Component);\n\n  function LineSeries(props) {\n    _classCallCheck(this, LineSeries);\n\n    var _this = _possibleConstructorReturn(this, (LineSeries.__proto__ || Object.getPrototypeOf(LineSeries)).call(this, props));\n\n    _this.renderSVG = _this.renderSVG.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    _this.isHover = _this.isHover.bind(_this);\n    return _this;\n  }\n\n  _createClass(LineSeries, [{\n    key: \"isHover\",\n    value: function isHover(moreProps) {\n      // console.log(\"HERE\")\n      var _props = this.props,\n          highlightOnHover = _props.highlightOnHover,\n          yAccessor = _props.yAccessor,\n          hoverTolerance = _props.hoverTolerance;\n      if (!highlightOnHover) return false;\n      var mouseXY = moreProps.mouseXY,\n          currentItem = moreProps.currentItem,\n          xScale = moreProps.xScale,\n          plotData = moreProps.plotData;\n      var _moreProps$chartConfi = moreProps.chartConfig,\n          yScale = _moreProps$chartConfi.yScale,\n          origin = _moreProps$chartConfi.origin;\n      var xAccessor = moreProps.xAccessor;\n\n      var _mouseXY = _slicedToArray(mouseXY, 2),\n          x = _mouseXY[0],\n          y = _mouseXY[1];\n\n      var radius = hoverTolerance;\n\n      var _getClosestItemIndexe = (0, _utils.getClosestItemIndexes)(plotData, xScale.invert(x), xAccessor),\n          left = _getClosestItemIndexe.left,\n          right = _getClosestItemIndexe.right;\n\n      if (left === right) {\n        var cy = yScale(yAccessor(currentItem)) + origin[1];\n        var cx = xScale(xAccessor(currentItem)) + origin[0];\n        var hovering1 = Math.pow(x - cx, 2) + Math.pow(y - cy, 2) < Math.pow(radius, 2);\n        return hovering1;\n      } else {\n        var l = plotData[left];\n        var r = plotData[right];\n        var x1 = xScale(xAccessor(l)) + origin[0];\n        var y1 = yScale(yAccessor(l)) + origin[1];\n        var x2 = xScale(xAccessor(r)) + origin[0];\n        var y2 = yScale(yAccessor(r)) + origin[1]; // y = m * x + b\n\n        var m\n        /* slope */\n        = (y2 - y1) / (x2 - x1);\n        var b\n        /* y intercept */\n        = -1 * m * x1 + y1;\n        var desiredY = Math.round(m * x + b);\n        var hovering2 = y >= desiredY - radius && y <= desiredY + radius;\n        return hovering2;\n      }\n    }\n  }, {\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      var _props2 = this.props,\n          yAccessor = _props2.yAccessor,\n          stroke = _props2.stroke,\n          strokeOpacity = _props2.strokeOpacity,\n          strokeWidth = _props2.strokeWidth,\n          hoverStrokeWidth = _props2.hoverStrokeWidth,\n          defined = _props2.defined,\n          strokeDasharray = _props2.strokeDasharray,\n          interpolation = _props2.interpolation,\n          canvasClip = _props2.canvasClip;\n      var connectNulls = this.props.connectNulls;\n      var xAccessor = moreProps.xAccessor;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData,\n          hovering = moreProps.hovering;\n\n      if (canvasClip) {\n        ctx.save();\n        canvasClip(ctx, moreProps);\n      }\n\n      ctx.lineWidth = hovering ? hoverStrokeWidth : strokeWidth;\n      ctx.strokeStyle = (0, _utils.hexToRGBA)(stroke, strokeOpacity);\n      ctx.setLineDash((0, _utils.getStrokeDasharray)(strokeDasharray).split(\",\"));\n      var dataSeries = (0, _d3Shape.line)().x(function (d) {\n        return Math.round(xScale(xAccessor(d)));\n      }).y(function (d) {\n        return Math.round(yScale(yAccessor(d)));\n      });\n\n      if ((0, _utils.isDefined)(interpolation)) {\n        dataSeries.curve(interpolation);\n      }\n\n      if (!connectNulls) {\n        dataSeries.defined(function (d) {\n          return defined(yAccessor(d));\n        });\n      }\n\n      ctx.beginPath();\n      dataSeries.context(ctx)(plotData);\n      ctx.stroke();\n\n      if (canvasClip) {\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG(moreProps) {\n      var _props3 = this.props,\n          yAccessor = _props3.yAccessor,\n          stroke = _props3.stroke,\n          strokeOpacity = _props3.strokeOpacity,\n          strokeWidth = _props3.strokeWidth,\n          hoverStrokeWidth = _props3.hoverStrokeWidth,\n          defined = _props3.defined,\n          strokeDasharray = _props3.strokeDasharray;\n      var connectNulls = this.props.connectNulls;\n      var _props4 = this.props,\n          interpolation = _props4.interpolation,\n          style = _props4.style;\n      var xAccessor = moreProps.xAccessor,\n          chartConfig = moreProps.chartConfig;\n      var xScale = moreProps.xScale,\n          plotData = moreProps.plotData,\n          hovering = moreProps.hovering;\n      var yScale = chartConfig.yScale;\n      var dataSeries = (0, _d3Shape.line)().x(function (d) {\n        return Math.round(xScale(xAccessor(d)));\n      }).y(function (d) {\n        return Math.round(yScale(yAccessor(d)));\n      });\n\n      if ((0, _utils.isDefined)(interpolation)) {\n        dataSeries.curve(interpolation);\n      }\n\n      if (!connectNulls) {\n        dataSeries.defined(function (d) {\n          return defined(yAccessor(d));\n        });\n      }\n\n      var d = dataSeries(plotData);\n      var _props5 = this.props,\n          fill = _props5.fill,\n          className = _props5.className;\n      return _react2.default.createElement(\"path\", {\n        style: style,\n        className: className + \" \" + (stroke ? \"\" : \" line-stroke\"),\n        d: d,\n        stroke: stroke,\n        strokeOpacity: strokeOpacity,\n        strokeWidth: hovering ? hoverStrokeWidth : strokeWidth,\n        strokeDasharray: (0, _utils.getStrokeDasharray)(strokeDasharray),\n        fill: fill\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props6 = this.props,\n          highlightOnHover = _props6.highlightOnHover,\n          onHover = _props6.onHover,\n          onUnHover = _props6.onUnHover;\n      var hoverProps = highlightOnHover || onHover || onUnHover ? {\n        isHover: this.isHover,\n        drawOn: [\"mousemove\", \"pan\"],\n        canvasToDraw: _GenericComponent.getMouseCanvas\n      } : {\n        drawOn: [\"pan\"],\n        canvasToDraw: _GenericComponent.getAxisCanvas\n      };\n      return _react2.default.createElement(_GenericChartComponent2.default, _extends({\n        svgDraw: this.renderSVG,\n        canvasDraw: this.drawOnCanvas,\n        onClickWhenHover: this.props.onClick,\n        onDoubleClickWhenHover: this.props.onDoubleClick,\n        onContextMenuWhenHover: this.props.onContextMenu,\n        onHover: this.props.onHover,\n        onUnHover: this.props.onUnHover\n      }, hoverProps));\n    }\n  }]);\n\n  return LineSeries;\n}(_react.Component);\n/*\nfunction segment(points, ctx) {\n\tctx.beginPath();\n\n\tconst [x, y] = first(points);\n\tctx.moveTo(x, y);\n\tfor (let i = 1; i < points.length; i++) {\n\t\tconst [x1, y1] = points[i];\n\t\tctx.lineTo(x1, y1);\n\t}\n\n\tctx.stroke();\n}\n*/\n\n\nLineSeries.propTypes = {\n  className: _propTypes2.default.string,\n  strokeWidth: _propTypes2.default.number,\n  strokeOpacity: _propTypes2.default.number,\n  stroke: _propTypes2.default.string,\n  hoverStrokeWidth: _propTypes2.default.number,\n  fill: _propTypes2.default.string,\n  defined: _propTypes2.default.func,\n  hoverTolerance: _propTypes2.default.number,\n  strokeDasharray: _propTypes2.default.oneOf(_utils.strokeDashTypes),\n  highlightOnHover: _propTypes2.default.bool,\n  onClick: _propTypes2.default.func,\n  onDoubleClick: _propTypes2.default.func,\n  onHover: _propTypes2.default.func,\n  onUnHover: _propTypes2.default.func,\n  onContextMenu: _propTypes2.default.func,\n  yAccessor: _propTypes2.default.func,\n  connectNulls: _propTypes2.default.bool,\n  interpolation: _propTypes2.default.func,\n  canvasClip: _propTypes2.default.func,\n  style: _propTypes2.default.object\n};\nLineSeries.defaultProps = {\n  className: \"line \",\n  strokeWidth: 1,\n  strokeOpacity: 1,\n  hoverStrokeWidth: 4,\n  fill: \"none\",\n  stroke: \"#4682B4\",\n  strokeDasharray: \"Solid\",\n  defined: function defined(d) {\n    return !isNaN(d);\n  },\n  hoverTolerance: 6,\n  highlightOnHover: false,\n  connectNulls: false,\n  onClick: function onClick(e) {\n    console.log(\"Click\", e);\n  },\n  onDoubleClick: function onDoubleClick(e) {\n    console.log(\"Double Click\", e);\n  },\n  onContextMenu: function onContextMenu(e) {\n    console.log(\"Right Click\", e);\n  }\n};\nexports.default = LineSeries;","map":null,"metadata":{},"sourceType":"script"}