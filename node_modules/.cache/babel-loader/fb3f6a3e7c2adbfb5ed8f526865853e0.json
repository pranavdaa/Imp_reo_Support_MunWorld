{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _GenericComponent = require(\"../GenericComponent\");\n\nvar _GenericComponent2 = _interopRequireDefault(_GenericComponent);\n\nvar _d3Array = require(\"d3-array\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar HoverTooltip = function (_Component) {\n  _inherits(HoverTooltip, _Component);\n\n  function HoverTooltip(props) {\n    _classCallCheck(this, HoverTooltip);\n\n    var _this = _possibleConstructorReturn(this, (HoverTooltip.__proto__ || Object.getPrototypeOf(HoverTooltip)).call(this, props));\n\n    _this.renderSVG = _this.renderSVG.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    return _this;\n  }\n\n  _createClass(HoverTooltip, [{\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      var pointer = helper(this.props, moreProps, ctx);\n      var height = moreProps.height;\n      if ((0, _utils.isNotDefined)(pointer)) return null;\n\n      _drawOnCanvas(ctx, this.props, this.context, pointer, height, moreProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(_GenericComponent2.default, {\n        svgDraw: this.renderSVG,\n        canvasDraw: this.drawOnCanvas,\n        drawOn: [\"mousemove\", \"pan\"\n        /* , \"mouseleave\" */\n        ]\n      });\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG(moreProps) {\n      var pointer = helper(this.props, moreProps);\n      if ((0, _utils.isNotDefined)(pointer)) return null;\n      var _props = this.props,\n          bgFill = _props.bgFill,\n          bgOpacity = _props.bgOpacity,\n          backgroundShapeSVG = _props.backgroundShapeSVG,\n          tooltipSVG = _props.tooltipSVG;\n      var _props2 = this.props,\n          bgheight = _props2.bgheight,\n          bgwidth = _props2.bgwidth;\n      var height = moreProps.height;\n      var x = pointer.x,\n          y = pointer.y,\n          content = pointer.content,\n          centerX = pointer.centerX,\n          pointWidth = pointer.pointWidth,\n          bgSize = pointer.bgSize;\n      var bgShape = (0, _utils.isDefined)(bgwidth) && (0, _utils.isDefined)(bgheight) ? {\n        width: bgwidth,\n        height: bgheight\n      } : bgSize;\n      return _react2.default.createElement(\"g\", null, _react2.default.createElement(\"rect\", {\n        x: centerX - pointWidth / 2,\n        y: 0,\n        width: pointWidth,\n        height: height,\n        fill: bgFill,\n        opacity: bgOpacity\n      }), _react2.default.createElement(\"g\", {\n        className: \"react-stockcharts-tooltip-content\",\n        transform: \"translate(\" + x + \", \" + y + \")\"\n      }, backgroundShapeSVG(this.props, bgShape), tooltipSVG(this.props, content)));\n    }\n  }]);\n\n  return HoverTooltip;\n}(_react.Component);\n\nHoverTooltip.propTypes = {\n  chartId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n  yAccessor: _propTypes2.default.func,\n  tooltipSVG: _propTypes2.default.func,\n  backgroundShapeSVG: _propTypes2.default.func,\n  bgwidth: _propTypes2.default.number,\n  bgheight: _propTypes2.default.number,\n  bgFill: _propTypes2.default.string.isRequired,\n  bgOpacity: _propTypes2.default.number.isRequired,\n  tooltipContent: _propTypes2.default.func.isRequired,\n  origin: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.func]).isRequired,\n  fontFamily: _propTypes2.default.string,\n  fontSize: _propTypes2.default.number\n};\nHoverTooltip.contextTypes = {\n  margin: _propTypes2.default.object.isRequired,\n  ratio: _propTypes2.default.number.isRequired\n};\nHoverTooltip.defaultProps = {\n  // bgwidth: 150,\n  // bgheight: 50,\n  tooltipSVG: tooltipSVG,\n  tooltipCanvas: tooltipCanvas,\n  origin: origin,\n  fill: \"#D4E2FD\",\n  bgFill: \"#D4E2FD\",\n  bgOpacity: 0.5,\n  stroke: \"#9B9BFF\",\n  fontFill: \"#000000\",\n  opacity: 0.8,\n  backgroundShapeSVG: backgroundShapeSVG,\n  backgroundShapeCanvas: backgroundShapeCanvas,\n  fontFamily: \"Helvetica Neue, Helvetica, Arial, sans-serif\",\n  fontSize: 12\n};\nvar PADDING = 5;\nvar X = 10;\nvar Y = 10;\n/* eslint-disable react/prop-types */\n\nfunction backgroundShapeSVG(_ref, _ref2) {\n  var fill = _ref.fill,\n      stroke = _ref.stroke,\n      opacity = _ref.opacity;\n  var height = _ref2.height,\n      width = _ref2.width;\n  return _react2.default.createElement(\"rect\", {\n    height: height,\n    width: width,\n    fill: fill,\n    opacity: opacity,\n    stroke: stroke\n  });\n}\n\nfunction tooltipSVG(_ref3, content) {\n  var fontFamily = _ref3.fontFamily,\n      fontSize = _ref3.fontSize,\n      fontFill = _ref3.fontFill;\n  var tspans = [];\n  var startY = Y + fontSize * 0.9;\n\n  for (var i = 0; i < content.y.length; i++) {\n    var y = content.y[i];\n    var textY = startY + fontSize * (i + 1);\n    tspans.push(_react2.default.createElement(\"tspan\", {\n      key: \"L-\" + i,\n      x: X,\n      y: textY,\n      fill: y.stroke\n    }, y.label));\n    tspans.push(_react2.default.createElement(\"tspan\", {\n      key: i\n    }, \": \"));\n    tspans.push(_react2.default.createElement(\"tspan\", {\n      key: \"V-\" + i\n    }, y.value));\n  }\n\n  return _react2.default.createElement(\"text\", {\n    fontFamily: fontFamily,\n    fontSize: fontSize,\n    fill: fontFill\n  }, _react2.default.createElement(\"tspan\", {\n    x: X,\n    y: startY\n  }, content.x), tspans);\n}\n/* eslint-enable react/prop-types */\n\n\nfunction backgroundShapeCanvas(props, _ref4, ctx) {\n  var width = _ref4.width,\n      height = _ref4.height;\n  var fill = props.fill,\n      stroke = props.stroke,\n      opacity = props.opacity;\n  ctx.fillStyle = (0, _utils.hexToRGBA)(fill, opacity);\n  ctx.strokeStyle = stroke;\n  ctx.beginPath();\n  ctx.rect(0, 0, width, height);\n  ctx.fill();\n  ctx.stroke();\n}\n\nfunction tooltipCanvas(_ref5, content, ctx) {\n  var fontFamily = _ref5.fontFamily,\n      fontSize = _ref5.fontSize,\n      fontFill = _ref5.fontFill;\n  var startY = Y + fontSize * 0.9;\n  ctx.font = fontSize + \"px \" + fontFamily;\n  ctx.fillStyle = fontFill;\n  ctx.textAlign = \"left\";\n  ctx.fillText(content.x, X, startY);\n\n  for (var i = 0; i < content.y.length; i++) {\n    var y = content.y[i];\n    var textY = startY + fontSize * (i + 1);\n    ctx.fillStyle = y.stroke || fontFill;\n    ctx.fillText(y.label, X, textY);\n    ctx.fillStyle = fontFill;\n    ctx.fillText(\": \" + y.value, X + ctx.measureText(y.label).width, textY);\n  }\n}\n\nfunction _drawOnCanvas(ctx, props, context, pointer, height) {\n  var margin = context.margin,\n      ratio = context.ratio;\n  var bgFill = props.bgFill,\n      bgOpacity = props.bgOpacity;\n  var backgroundShapeCanvas = props.backgroundShapeCanvas,\n      tooltipCanvas = props.tooltipCanvas;\n  var originX = 0.5 * ratio + margin.left;\n  var originY = 0.5 * ratio + margin.top;\n  ctx.save();\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  ctx.scale(ratio, ratio);\n  ctx.translate(originX, originY);\n  var x = pointer.x,\n      y = pointer.y,\n      content = pointer.content,\n      centerX = pointer.centerX,\n      pointWidth = pointer.pointWidth,\n      bgSize = pointer.bgSize;\n  ctx.fillStyle = (0, _utils.hexToRGBA)(bgFill, bgOpacity);\n  ctx.beginPath();\n  ctx.rect(centerX - pointWidth / 2, 0, pointWidth, height);\n  ctx.fill();\n  ctx.translate(x, y);\n  backgroundShapeCanvas(props, bgSize, ctx);\n  tooltipCanvas(props, content, ctx);\n  ctx.restore();\n}\n\nfunction calculateTooltipSize(_ref6, content, ctx) {\n  var fontFamily = _ref6.fontFamily,\n      fontSize = _ref6.fontSize,\n      fontFill = _ref6.fontFill;\n\n  if ((0, _utils.isNotDefined)(ctx)) {\n    var canvas = document.createElement(\"canvas\");\n    ctx = canvas.getContext(\"2d\");\n  }\n\n  ctx.font = fontSize + \"px \" + fontFamily;\n  ctx.fillStyle = fontFill;\n  ctx.textAlign = \"left\";\n\n  var measureText = function measureText(str) {\n    return {\n      width: ctx.measureText(str).width,\n      height: fontSize\n    };\n  };\n\n  var _content$y$map$reduce = content.y.map(function (_ref7) {\n    var label = _ref7.label,\n        value = _ref7.value;\n    return measureText(label + \": \" + value);\n  }) // Sum all y and x sizes (begin with x label size)\n  .reduce(function (res, size) {\n    return sumSizes(res, size);\n  }, measureText(String(content.x))),\n      width = _content$y$map$reduce.width,\n      height = _content$y$map$reduce.height;\n\n  return {\n    width: width + 2 * X,\n    height: height + 2 * Y\n  };\n}\n\nfunction sumSizes() {\n  for (var _len = arguments.length, sizes = Array(_len), _key = 0; _key < _len; _key++) {\n    sizes[_key] = arguments[_key];\n  }\n\n  return {\n    width: Math.max.apply(Math, _toConsumableArray(sizes.map(function (size) {\n      return size.width;\n    }))),\n    height: (0, _d3Array.sum)(sizes, function (d) {\n      return d.height;\n    })\n  };\n}\n\nfunction normalizeX(x, bgSize, pointWidth, width) {\n  // return x - bgSize.width - pointWidth / 2 - PADDING * 2 < 0\n  return x < width / 2 ? x + pointWidth / 2 + PADDING : x - bgSize.width - pointWidth / 2 - PADDING;\n}\n\nfunction normalizeY(y, bgSize) {\n  return y - bgSize.height <= 0 ? y + PADDING : y - bgSize.height - PADDING;\n}\n\nfunction origin(props, moreProps, bgSize, pointWidth) {\n  var chartId = props.chartId,\n      yAccessor = props.yAccessor;\n  var mouseXY = moreProps.mouseXY,\n      xAccessor = moreProps.xAccessor,\n      currentItem = moreProps.currentItem,\n      xScale = moreProps.xScale,\n      chartConfig = moreProps.chartConfig,\n      width = moreProps.width;\n  var y = (0, _utils.last)(mouseXY);\n  var xValue = xAccessor(currentItem);\n  var x = Math.round(xScale(xValue));\n\n  if ((0, _utils.isDefined)(chartId) && (0, _utils.isDefined)(yAccessor) && (0, _utils.isDefined)(chartConfig) && (0, _utils.isDefined)(chartConfig.findIndex)) {\n    var yValue = yAccessor(currentItem);\n    var chartIndex = chartConfig.findIndex(function (x) {\n      return x.id === chartId;\n    });\n    y = Math.round(chartConfig[chartIndex].yScale(yValue));\n  }\n\n  x = normalizeX(x, bgSize, pointWidth, width);\n  y = normalizeY(y, bgSize);\n  return [x, y];\n}\n\nfunction helper(props, moreProps, ctx) {\n  var show = moreProps.show,\n      xScale = moreProps.xScale,\n      currentItem = moreProps.currentItem,\n      plotData = moreProps.plotData;\n  var origin = props.origin,\n      tooltipContent = props.tooltipContent;\n  var xAccessor = moreProps.xAccessor,\n      displayXAccessor = moreProps.displayXAccessor;\n  if (!show || (0, _utils.isNotDefined)(currentItem)) return;\n  var xValue = xAccessor(currentItem);\n  if (!show || (0, _utils.isNotDefined)(xValue)) return;\n  var content = tooltipContent({\n    currentItem: currentItem,\n    xAccessor: displayXAccessor\n  });\n  var centerX = xScale(xValue);\n  var pointWidth = Math.abs(xScale(xAccessor((0, _utils.last)(plotData))) - xScale(xAccessor((0, _utils.first)(plotData)))) / (plotData.length - 1);\n  var bgSize = calculateTooltipSize(props, content, ctx);\n\n  var _origin = origin(props, moreProps, bgSize, pointWidth),\n      _origin2 = _slicedToArray(_origin, 2),\n      x = _origin2[0],\n      y = _origin2[1];\n\n  return {\n    x: x,\n    y: y,\n    content: content,\n    centerX: centerX,\n    pointWidth: pointWidth,\n    bgSize: bgSize\n  };\n}\n\nexports.default = HoverTooltip;","map":null,"metadata":{},"sourceType":"script"}