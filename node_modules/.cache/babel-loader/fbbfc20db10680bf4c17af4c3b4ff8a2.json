{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.default = function () {\n  var options = _defaultOptionsForComputation.ATR;\n\n  var source = function source(d) {\n    return {\n      open: d.open,\n      high: d.high,\n      low: d.low,\n      close: d.close\n    };\n  };\n\n  function calculator(data) {\n    var _options = options,\n        windowSize = _options.windowSize;\n    var trueRangeAlgorithm = (0, _utils.slidingWindow)().windowSize(2).source(source).undefinedValue(function (d) {\n      return d.high - d.low;\n    }) // the first TR value is simply the High minus the Low\n    .accumulator(function (values) {\n      var prev = values[0];\n      var d = values[1];\n      return Math.max(d.high - d.low, d.high - prev.close, d.low - prev.close);\n    });\n    var prevATR = void 0;\n    var atrAlgorithm = (0, _utils.slidingWindow)().skipInitial(1) // trueRange starts from index 1 so ATR starts from 1\n    .windowSize(windowSize).accumulator(function (values) {\n      var tr = (0, _utils.last)(values);\n      var atr = (0, _utils.isDefined)(prevATR) ? (prevATR * (windowSize - 1) + tr) / windowSize : (0, _d3Array.sum)(values) / windowSize;\n      prevATR = atr;\n      return atr;\n    });\n    var newData = atrAlgorithm(trueRangeAlgorithm(data));\n    return newData;\n  }\n\n  calculator.undefinedLength = function () {\n    var _options2 = options,\n        windowSize = _options2.windowSize;\n    return windowSize - 1;\n  };\n\n  calculator.options = function (x) {\n    if (!arguments.length) {\n      return options;\n    }\n\n    options = _extends({}, _defaultOptionsForComputation.ATR, x);\n    return calculator;\n  };\n\n  calculator.source = function (x) {\n    if (!arguments.length) {\n      return source;\n    }\n\n    source = x;\n    return calculator;\n  };\n\n  return calculator;\n};\n\nvar _d3Array = require(\"d3-array\");\n\nvar _defaultOptionsForComputation = require(\"./defaultOptionsForComputation\");\n\nvar _utils = require(\"../utils\");","map":null,"metadata":{},"sourceType":"script"}