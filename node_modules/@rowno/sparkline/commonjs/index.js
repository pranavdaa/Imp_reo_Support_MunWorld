'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _d3Shape = require('d3-shape');

var _d3Scale = require('d3-scale');

var _d3Array = require('d3-array');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var curveFunction = _d3Shape.curveMonotoneX;
var defaultColors = {
  area: 'rgba(199, 228, 255, 0.5)',
  line: '#004585'
};

var Sparkline = function (_PureComponent) {
  (0, _inherits3.default)(Sparkline, _PureComponent);

  function Sparkline() {
    (0, _classCallCheck3.default)(this, Sparkline);
    return (0, _possibleConstructorReturn3.default)(this, (Sparkline.__proto__ || (0, _getPrototypeOf2.default)(Sparkline)).apply(this, arguments));
  }

  (0, _createClass3.default)(Sparkline, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          lines = _props.lines,
          width = _props.width,
          height = _props.height;

      var maxX = (0, _d3Array.max)(lines, function (s) {
        return s.values.length - 1;
      });
      var maxY = (0, _d3Array.max)(lines, function (s) {
        return (0, _d3Array.max)(s.values);
      });
      var x = (0, _d3Scale.scaleLinear)().domain([0, maxX]).range([0, width]);
      // Set range to 1 to make room for the line stroke
      var y = (0, _d3Scale.scaleLinear)().domain([0, maxY]).range([height, 1]);

      var areaFunction = (0, _d3Shape.area)().x(function (d, i) {
        return x(i);
      }).y0(height).y1(function (d) {
        return y(d);
      }).curve(curveFunction);

      var lineFunction = (0, _d3Shape.line)().x(function (d, i) {
        return x(i);
      }).y(function (d) {
        return y(d);
      }).curve(curveFunction);

      return _react2.default.createElement(
        'svg',
        { width: width, height: height, viewBox: '0 0 ' + width + ' ' + height },
        lines.map(function (line, index) {
          var colors = (0, _extends3.default)({}, defaultColors, line.colors);
          return _react2.default.createElement(
            'g',
            { key: line.key || index },
            _react2.default.createElement(
              'path',
              { d: areaFunction(line.values), fill: colors.area },
              line.title && _react2.default.createElement(
                'title',
                null,
                line.title
              )
            ),
            _react2.default.createElement('path', { d: lineFunction(line.values), stroke: colors.line, fill: 'none' })
          );
        })
      );
    }
  }]);
  return Sparkline;
}(_react.PureComponent);

Sparkline.displayName = 'Sparkline';
Sparkline.propTypes = {
  lines: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    values: _propTypes2.default.arrayOf(_propTypes2.default.number.isRequired).isRequired,
    colors: _propTypes2.default.shape({
      area: _propTypes2.default.string.isRequired,
      line: _propTypes2.default.string.isRequired
    }),
    title: _propTypes2.default.string,
    key: _propTypes2.default.any
  })).isRequired,
  width: _propTypes2.default.number.isRequired,
  height: _propTypes2.default.number.isRequired
};
exports.default = Sparkline;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJjdXJ2ZUZ1bmN0aW9uIiwiZGVmYXVsdENvbG9ycyIsImFyZWEiLCJsaW5lIiwiU3BhcmtsaW5lIiwicHJvcHMiLCJsaW5lcyIsIndpZHRoIiwiaGVpZ2h0IiwibWF4WCIsInMiLCJ2YWx1ZXMiLCJsZW5ndGgiLCJtYXhZIiwieCIsImRvbWFpbiIsInJhbmdlIiwieSIsImFyZWFGdW5jdGlvbiIsImQiLCJpIiwieTAiLCJ5MSIsImN1cnZlIiwibGluZUZ1bmN0aW9uIiwibWFwIiwiaW5kZXgiLCJjb2xvcnMiLCJrZXkiLCJ0aXRsZSIsImRpc3BsYXlOYW1lIiwicHJvcFR5cGVzIiwiYXJyYXlPZiIsInNoYXBlIiwibnVtYmVyIiwiaXNSZXF1aXJlZCIsInN0cmluZyIsImFueSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTUEsdUNBQU47QUFDQSxJQUFNQyxnQkFBZ0I7QUFDcEJDLFFBQU0sMEJBRGM7QUFFcEJDLFFBQU07QUFGYyxDQUF0Qjs7SUFLcUJDLFM7Ozs7Ozs7Ozs7NkJBa0JWO0FBQUEsbUJBQ3dCLEtBQUtDLEtBRDdCO0FBQUEsVUFDQUMsS0FEQSxVQUNBQSxLQURBO0FBQUEsVUFDT0MsS0FEUCxVQUNPQSxLQURQO0FBQUEsVUFDY0MsTUFEZCxVQUNjQSxNQURkOztBQUVQLFVBQU1DLE9BQU8sa0JBQUlILEtBQUosRUFBVztBQUFBLGVBQUtJLEVBQUVDLE1BQUYsQ0FBU0MsTUFBVCxHQUFrQixDQUF2QjtBQUFBLE9BQVgsQ0FBYjtBQUNBLFVBQU1DLE9BQU8sa0JBQUlQLEtBQUosRUFBVztBQUFBLGVBQUssa0JBQUlJLEVBQUVDLE1BQU4sQ0FBTDtBQUFBLE9BQVgsQ0FBYjtBQUNBLFVBQU1HLElBQUksNEJBQWNDLE1BQWQsQ0FBcUIsQ0FBQyxDQUFELEVBQUlOLElBQUosQ0FBckIsRUFBZ0NPLEtBQWhDLENBQXNDLENBQUMsQ0FBRCxFQUFJVCxLQUFKLENBQXRDLENBQVY7QUFDQTtBQUNBLFVBQU1VLElBQUksNEJBQWNGLE1BQWQsQ0FBcUIsQ0FBQyxDQUFELEVBQUlGLElBQUosQ0FBckIsRUFBZ0NHLEtBQWhDLENBQXNDLENBQUNSLE1BQUQsRUFBUyxDQUFULENBQXRDLENBQVY7O0FBRUEsVUFBTVUsZUFDSixxQkFDQ0osQ0FERCxDQUNHLFVBQUNLLENBQUQsRUFBSUMsQ0FBSjtBQUFBLGVBQVVOLEVBQUVNLENBQUYsQ0FBVjtBQUFBLE9BREgsRUFFQ0MsRUFGRCxDQUVJYixNQUZKLEVBR0NjLEVBSEQsQ0FHSTtBQUFBLGVBQUtMLEVBQUVFLENBQUYsQ0FBTDtBQUFBLE9BSEosRUFJQ0ksS0FKRCxDQUlPdkIsYUFKUCxDQURGOztBQU9BLFVBQU13QixlQUNKLHFCQUNDVixDQURELENBQ0csVUFBQ0ssQ0FBRCxFQUFJQyxDQUFKO0FBQUEsZUFBVU4sRUFBRU0sQ0FBRixDQUFWO0FBQUEsT0FESCxFQUVDSCxDQUZELENBRUc7QUFBQSxlQUFLQSxFQUFFRSxDQUFGLENBQUw7QUFBQSxPQUZILEVBR0NJLEtBSEQsQ0FHT3ZCLGFBSFAsQ0FERjs7QUFNQSxhQUNFO0FBQUE7QUFBQSxVQUFLLE9BQU9PLEtBQVosRUFBbUIsUUFBUUMsTUFBM0IsRUFBbUMsa0JBQWdCRCxLQUFoQixTQUF5QkMsTUFBNUQ7QUFDR0YsY0FBTW1CLEdBQU4sQ0FBVSxVQUFDdEIsSUFBRCxFQUFPdUIsS0FBUCxFQUFpQjtBQUMxQixjQUFNQyxvQ0FDRDFCLGFBREMsRUFFREUsS0FBS3dCLE1BRkosQ0FBTjtBQUlBLGlCQUNFO0FBQUE7QUFBQSxjQUFHLEtBQUt4QixLQUFLeUIsR0FBTCxJQUFZRixLQUFwQjtBQUNFO0FBQUE7QUFBQSxnQkFBTSxHQUFHUixhQUFhZixLQUFLUSxNQUFsQixDQUFULEVBQW9DLE1BQU1nQixPQUFPekIsSUFBakQ7QUFDR0MsbUJBQUswQixLQUFMLElBQWM7QUFBQTtBQUFBO0FBQVExQixxQkFBSzBCO0FBQWI7QUFEakIsYUFERjtBQUlFLG9EQUFNLEdBQUdMLGFBQWFyQixLQUFLUSxNQUFsQixDQUFULEVBQW9DLFFBQVFnQixPQUFPeEIsSUFBbkQsRUFBeUQsTUFBSyxNQUE5RDtBQUpGLFdBREY7QUFRRCxTQWJBO0FBREgsT0FERjtBQWtCRDs7Ozs7QUF6RGtCQyxTLENBQ1owQixXLEdBQWMsVztBQURGMUIsUyxDQUVaMkIsUyxHQUFZO0FBQ2pCekIsU0FBTyxvQkFBVTBCLE9BQVYsQ0FDTCxvQkFBVUMsS0FBVixDQUFnQjtBQUNkdEIsWUFBUSxvQkFBVXFCLE9BQVYsQ0FBa0Isb0JBQVVFLE1BQVYsQ0FBaUJDLFVBQW5DLEVBQStDQSxVQUR6QztBQUVkUixZQUFRLG9CQUFVTSxLQUFWLENBQWdCO0FBQ3RCL0IsWUFBTSxvQkFBVWtDLE1BQVYsQ0FBaUJELFVBREQ7QUFFdEJoQyxZQUFNLG9CQUFVaUMsTUFBVixDQUFpQkQ7QUFGRCxLQUFoQixDQUZNO0FBTWROLFdBQU8sb0JBQVVPLE1BTkg7QUFPZFIsU0FBSyxvQkFBVVM7QUFQRCxHQUFoQixDQURLLEVBVUxGLFVBWGU7QUFZakI1QixTQUFPLG9CQUFVMkIsTUFBVixDQUFpQkMsVUFaUDtBQWFqQjNCLFVBQVEsb0JBQVUwQixNQUFWLENBQWlCQztBQWJSLEM7a0JBRkEvQixTIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7UHVyZUNvbXBvbmVudH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQge2FyZWEsIGxpbmUsIGN1cnZlTW9ub3RvbmVYfSBmcm9tICdkMy1zaGFwZSdcbmltcG9ydCB7c2NhbGVMaW5lYXJ9IGZyb20gJ2QzLXNjYWxlJ1xuaW1wb3J0IHttYXh9IGZyb20gJ2QzLWFycmF5J1xuXG5jb25zdCBjdXJ2ZUZ1bmN0aW9uID0gY3VydmVNb25vdG9uZVhcbmNvbnN0IGRlZmF1bHRDb2xvcnMgPSB7XG4gIGFyZWE6ICdyZ2JhKDE5OSwgMjI4LCAyNTUsIDAuNSknLFxuICBsaW5lOiAnIzAwNDU4NSdcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3BhcmtsaW5lIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdTcGFya2xpbmUnXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgbGluZXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgdmFsdWVzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQpLmlzUmVxdWlyZWQsXG4gICAgICAgIGNvbG9yczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICBhcmVhOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgICAgbGluZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG4gICAgICAgIH0pLFxuICAgICAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAga2V5OiBQcm9wVHlwZXMuYW55XG4gICAgICB9KVxuICAgICkuaXNSZXF1aXJlZCxcbiAgICB3aWR0aDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGhlaWdodDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2xpbmVzLCB3aWR0aCwgaGVpZ2h0fSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBtYXhYID0gbWF4KGxpbmVzLCBzID0+IHMudmFsdWVzLmxlbmd0aCAtIDEpXG4gICAgY29uc3QgbWF4WSA9IG1heChsaW5lcywgcyA9PiBtYXgocy52YWx1ZXMpKVxuICAgIGNvbnN0IHggPSBzY2FsZUxpbmVhcigpLmRvbWFpbihbMCwgbWF4WF0pLnJhbmdlKFswLCB3aWR0aF0pXG4gICAgLy8gU2V0IHJhbmdlIHRvIDEgdG8gbWFrZSByb29tIGZvciB0aGUgbGluZSBzdHJva2VcbiAgICBjb25zdCB5ID0gc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsIG1heFldKS5yYW5nZShbaGVpZ2h0LCAxXSlcblxuICAgIGNvbnN0IGFyZWFGdW5jdGlvbiA9XG4gICAgICBhcmVhKClcbiAgICAgIC54KChkLCBpKSA9PiB4KGkpKVxuICAgICAgLnkwKGhlaWdodClcbiAgICAgIC55MShkID0+IHkoZCkpXG4gICAgICAuY3VydmUoY3VydmVGdW5jdGlvbilcblxuICAgIGNvbnN0IGxpbmVGdW5jdGlvbiA9XG4gICAgICBsaW5lKClcbiAgICAgIC54KChkLCBpKSA9PiB4KGkpKVxuICAgICAgLnkoZCA9PiB5KGQpKVxuICAgICAgLmN1cnZlKGN1cnZlRnVuY3Rpb24pXG5cbiAgICByZXR1cm4gKFxuICAgICAgPHN2ZyB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fSB2aWV3Qm94PXtgMCAwICR7d2lkdGh9ICR7aGVpZ2h0fWB9PlxuICAgICAgICB7bGluZXMubWFwKChsaW5lLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGNvbG9ycyA9IHtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRDb2xvcnMsXG4gICAgICAgICAgICAuLi5saW5lLmNvbG9yc1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGcga2V5PXtsaW5lLmtleSB8fCBpbmRleH0+XG4gICAgICAgICAgICAgIDxwYXRoIGQ9e2FyZWFGdW5jdGlvbihsaW5lLnZhbHVlcyl9IGZpbGw9e2NvbG9ycy5hcmVhfT5cbiAgICAgICAgICAgICAgICB7bGluZS50aXRsZSAmJiA8dGl0bGU+e2xpbmUudGl0bGV9PC90aXRsZT59XG4gICAgICAgICAgICAgIDwvcGF0aD5cbiAgICAgICAgICAgICAgPHBhdGggZD17bGluZUZ1bmN0aW9uKGxpbmUudmFsdWVzKX0gc3Ryb2tlPXtjb2xvcnMubGluZX0gZmlsbD1cIm5vbmVcIi8+XG4gICAgICAgICAgICA8L2c+XG4gICAgICAgICAgKVxuICAgICAgICB9KX1cbiAgICAgIDwvc3ZnPlxuICAgIClcbiAgfVxufVxuIl19