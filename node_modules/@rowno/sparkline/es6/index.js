import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { area, line, curveMonotoneX } from 'd3-shape';
import { scaleLinear } from 'd3-scale';
import { max } from 'd3-array';

var curveFunction = curveMonotoneX;
var defaultColors = {
  area: 'rgba(199, 228, 255, 0.5)',
  line: '#004585'
};

var Sparkline = function (_PureComponent) {
  _inherits(Sparkline, _PureComponent);

  function Sparkline() {
    _classCallCheck(this, Sparkline);

    return _possibleConstructorReturn(this, (Sparkline.__proto__ || _Object$getPrototypeOf(Sparkline)).apply(this, arguments));
  }

  _createClass(Sparkline, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          lines = _props.lines,
          width = _props.width,
          height = _props.height;

      var maxX = max(lines, function (s) {
        return s.values.length - 1;
      });
      var maxY = max(lines, function (s) {
        return max(s.values);
      });
      var x = scaleLinear().domain([0, maxX]).range([0, width]);
      // Set range to 1 to make room for the line stroke
      var y = scaleLinear().domain([0, maxY]).range([height, 1]);

      var areaFunction = area().x(function (d, i) {
        return x(i);
      }).y0(height).y1(function (d) {
        return y(d);
      }).curve(curveFunction);

      var lineFunction = line().x(function (d, i) {
        return x(i);
      }).y(function (d) {
        return y(d);
      }).curve(curveFunction);

      return React.createElement(
        'svg',
        { width: width, height: height, viewBox: '0 0 ' + width + ' ' + height },
        lines.map(function (line, index) {
          var colors = _extends({}, defaultColors, line.colors);
          return React.createElement(
            'g',
            { key: line.key || index },
            React.createElement(
              'path',
              { d: areaFunction(line.values), fill: colors.area },
              line.title && React.createElement(
                'title',
                null,
                line.title
              )
            ),
            React.createElement('path', { d: lineFunction(line.values), stroke: colors.line, fill: 'none' })
          );
        })
      );
    }
  }]);

  return Sparkline;
}(PureComponent);

Sparkline.displayName = 'Sparkline';
Sparkline.propTypes = {
  lines: PropTypes.arrayOf(PropTypes.shape({
    values: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,
    colors: PropTypes.shape({
      area: PropTypes.string.isRequired,
      line: PropTypes.string.isRequired
    }),
    title: PropTypes.string,
    key: PropTypes.any
  })).isRequired,
  width: PropTypes.number.isRequired,
  height: PropTypes.number.isRequired
};
export default Sparkline;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJhcmVhIiwibGluZSIsImN1cnZlTW9ub3RvbmVYIiwic2NhbGVMaW5lYXIiLCJtYXgiLCJjdXJ2ZUZ1bmN0aW9uIiwiZGVmYXVsdENvbG9ycyIsIlNwYXJrbGluZSIsInByb3BzIiwibGluZXMiLCJ3aWR0aCIsImhlaWdodCIsIm1heFgiLCJzIiwidmFsdWVzIiwibGVuZ3RoIiwibWF4WSIsIngiLCJkb21haW4iLCJyYW5nZSIsInkiLCJhcmVhRnVuY3Rpb24iLCJkIiwiaSIsInkwIiwieTEiLCJjdXJ2ZSIsImxpbmVGdW5jdGlvbiIsIm1hcCIsImluZGV4IiwiY29sb3JzIiwia2V5IiwidGl0bGUiLCJkaXNwbGF5TmFtZSIsInByb3BUeXBlcyIsImFycmF5T2YiLCJzaGFwZSIsIm51bWJlciIsImlzUmVxdWlyZWQiLCJzdHJpbmciLCJhbnkiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZUMsYUFBZixRQUFtQyxPQUFuQztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxTQUFRQyxJQUFSLEVBQWNDLElBQWQsRUFBb0JDLGNBQXBCLFFBQXlDLFVBQXpDO0FBQ0EsU0FBUUMsV0FBUixRQUEwQixVQUExQjtBQUNBLFNBQVFDLEdBQVIsUUFBa0IsVUFBbEI7O0FBRUEsSUFBTUMsZ0JBQWdCSCxjQUF0QjtBQUNBLElBQU1JLGdCQUFnQjtBQUNwQk4sUUFBTSwwQkFEYztBQUVwQkMsUUFBTTtBQUZjLENBQXRCOztJQUtxQk0sUzs7Ozs7Ozs7Ozs7NkJBa0JWO0FBQUEsbUJBQ3dCLEtBQUtDLEtBRDdCO0FBQUEsVUFDQUMsS0FEQSxVQUNBQSxLQURBO0FBQUEsVUFDT0MsS0FEUCxVQUNPQSxLQURQO0FBQUEsVUFDY0MsTUFEZCxVQUNjQSxNQURkOztBQUVQLFVBQU1DLE9BQU9SLElBQUlLLEtBQUosRUFBVztBQUFBLGVBQUtJLEVBQUVDLE1BQUYsQ0FBU0MsTUFBVCxHQUFrQixDQUF2QjtBQUFBLE9BQVgsQ0FBYjtBQUNBLFVBQU1DLE9BQU9aLElBQUlLLEtBQUosRUFBVztBQUFBLGVBQUtMLElBQUlTLEVBQUVDLE1BQU4sQ0FBTDtBQUFBLE9BQVgsQ0FBYjtBQUNBLFVBQU1HLElBQUlkLGNBQWNlLE1BQWQsQ0FBcUIsQ0FBQyxDQUFELEVBQUlOLElBQUosQ0FBckIsRUFBZ0NPLEtBQWhDLENBQXNDLENBQUMsQ0FBRCxFQUFJVCxLQUFKLENBQXRDLENBQVY7QUFDQTtBQUNBLFVBQU1VLElBQUlqQixjQUFjZSxNQUFkLENBQXFCLENBQUMsQ0FBRCxFQUFJRixJQUFKLENBQXJCLEVBQWdDRyxLQUFoQyxDQUFzQyxDQUFDUixNQUFELEVBQVMsQ0FBVCxDQUF0QyxDQUFWOztBQUVBLFVBQU1VLGVBQ0pyQixPQUNDaUIsQ0FERCxDQUNHLFVBQUNLLENBQUQsRUFBSUMsQ0FBSjtBQUFBLGVBQVVOLEVBQUVNLENBQUYsQ0FBVjtBQUFBLE9BREgsRUFFQ0MsRUFGRCxDQUVJYixNQUZKLEVBR0NjLEVBSEQsQ0FHSTtBQUFBLGVBQUtMLEVBQUVFLENBQUYsQ0FBTDtBQUFBLE9BSEosRUFJQ0ksS0FKRCxDQUlPckIsYUFKUCxDQURGOztBQU9BLFVBQU1zQixlQUNKMUIsT0FDQ2dCLENBREQsQ0FDRyxVQUFDSyxDQUFELEVBQUlDLENBQUo7QUFBQSxlQUFVTixFQUFFTSxDQUFGLENBQVY7QUFBQSxPQURILEVBRUNILENBRkQsQ0FFRztBQUFBLGVBQUtBLEVBQUVFLENBQUYsQ0FBTDtBQUFBLE9BRkgsRUFHQ0ksS0FIRCxDQUdPckIsYUFIUCxDQURGOztBQU1BLGFBQ0U7QUFBQTtBQUFBLFVBQUssT0FBT0ssS0FBWixFQUFtQixRQUFRQyxNQUEzQixFQUFtQyxrQkFBZ0JELEtBQWhCLFNBQXlCQyxNQUE1RDtBQUNHRixjQUFNbUIsR0FBTixDQUFVLFVBQUMzQixJQUFELEVBQU80QixLQUFQLEVBQWlCO0FBQzFCLGNBQU1DLHNCQUNEeEIsYUFEQyxFQUVETCxLQUFLNkIsTUFGSixDQUFOO0FBSUEsaUJBQ0U7QUFBQTtBQUFBLGNBQUcsS0FBSzdCLEtBQUs4QixHQUFMLElBQVlGLEtBQXBCO0FBQ0U7QUFBQTtBQUFBLGdCQUFNLEdBQUdSLGFBQWFwQixLQUFLYSxNQUFsQixDQUFULEVBQW9DLE1BQU1nQixPQUFPOUIsSUFBakQ7QUFDR0MsbUJBQUsrQixLQUFMLElBQWM7QUFBQTtBQUFBO0FBQVEvQixxQkFBSytCO0FBQWI7QUFEakIsYUFERjtBQUlFLDBDQUFNLEdBQUdMLGFBQWExQixLQUFLYSxNQUFsQixDQUFULEVBQW9DLFFBQVFnQixPQUFPN0IsSUFBbkQsRUFBeUQsTUFBSyxNQUE5RDtBQUpGLFdBREY7QUFRRCxTQWJBO0FBREgsT0FERjtBQWtCRDs7OztFQXpEb0NILGE7O0FBQWxCUyxTLENBQ1owQixXLEdBQWMsVztBQURGMUIsUyxDQUVaMkIsUyxHQUFZO0FBQ2pCekIsU0FBT1YsVUFBVW9DLE9BQVYsQ0FDTHBDLFVBQVVxQyxLQUFWLENBQWdCO0FBQ2R0QixZQUFRZixVQUFVb0MsT0FBVixDQUFrQnBDLFVBQVVzQyxNQUFWLENBQWlCQyxVQUFuQyxFQUErQ0EsVUFEekM7QUFFZFIsWUFBUS9CLFVBQVVxQyxLQUFWLENBQWdCO0FBQ3RCcEMsWUFBTUQsVUFBVXdDLE1BQVYsQ0FBaUJELFVBREQ7QUFFdEJyQyxZQUFNRixVQUFVd0MsTUFBVixDQUFpQkQ7QUFGRCxLQUFoQixDQUZNO0FBTWROLFdBQU9qQyxVQUFVd0MsTUFOSDtBQU9kUixTQUFLaEMsVUFBVXlDO0FBUEQsR0FBaEIsQ0FESyxFQVVMRixVQVhlO0FBWWpCNUIsU0FBT1gsVUFBVXNDLE1BQVYsQ0FBaUJDLFVBWlA7QUFhakIzQixVQUFRWixVQUFVc0MsTUFBVixDQUFpQkM7QUFiUixDO2VBRkEvQixTIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7UHVyZUNvbXBvbmVudH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQge2FyZWEsIGxpbmUsIGN1cnZlTW9ub3RvbmVYfSBmcm9tICdkMy1zaGFwZSdcbmltcG9ydCB7c2NhbGVMaW5lYXJ9IGZyb20gJ2QzLXNjYWxlJ1xuaW1wb3J0IHttYXh9IGZyb20gJ2QzLWFycmF5J1xuXG5jb25zdCBjdXJ2ZUZ1bmN0aW9uID0gY3VydmVNb25vdG9uZVhcbmNvbnN0IGRlZmF1bHRDb2xvcnMgPSB7XG4gIGFyZWE6ICdyZ2JhKDE5OSwgMjI4LCAyNTUsIDAuNSknLFxuICBsaW5lOiAnIzAwNDU4NSdcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3BhcmtsaW5lIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdTcGFya2xpbmUnXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgbGluZXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgdmFsdWVzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQpLmlzUmVxdWlyZWQsXG4gICAgICAgIGNvbG9yczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICBhcmVhOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgICAgbGluZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG4gICAgICAgIH0pLFxuICAgICAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAga2V5OiBQcm9wVHlwZXMuYW55XG4gICAgICB9KVxuICAgICkuaXNSZXF1aXJlZCxcbiAgICB3aWR0aDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGhlaWdodDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2xpbmVzLCB3aWR0aCwgaGVpZ2h0fSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBtYXhYID0gbWF4KGxpbmVzLCBzID0+IHMudmFsdWVzLmxlbmd0aCAtIDEpXG4gICAgY29uc3QgbWF4WSA9IG1heChsaW5lcywgcyA9PiBtYXgocy52YWx1ZXMpKVxuICAgIGNvbnN0IHggPSBzY2FsZUxpbmVhcigpLmRvbWFpbihbMCwgbWF4WF0pLnJhbmdlKFswLCB3aWR0aF0pXG4gICAgLy8gU2V0IHJhbmdlIHRvIDEgdG8gbWFrZSByb29tIGZvciB0aGUgbGluZSBzdHJva2VcbiAgICBjb25zdCB5ID0gc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsIG1heFldKS5yYW5nZShbaGVpZ2h0LCAxXSlcblxuICAgIGNvbnN0IGFyZWFGdW5jdGlvbiA9XG4gICAgICBhcmVhKClcbiAgICAgIC54KChkLCBpKSA9PiB4KGkpKVxuICAgICAgLnkwKGhlaWdodClcbiAgICAgIC55MShkID0+IHkoZCkpXG4gICAgICAuY3VydmUoY3VydmVGdW5jdGlvbilcblxuICAgIGNvbnN0IGxpbmVGdW5jdGlvbiA9XG4gICAgICBsaW5lKClcbiAgICAgIC54KChkLCBpKSA9PiB4KGkpKVxuICAgICAgLnkoZCA9PiB5KGQpKVxuICAgICAgLmN1cnZlKGN1cnZlRnVuY3Rpb24pXG5cbiAgICByZXR1cm4gKFxuICAgICAgPHN2ZyB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fSB2aWV3Qm94PXtgMCAwICR7d2lkdGh9ICR7aGVpZ2h0fWB9PlxuICAgICAgICB7bGluZXMubWFwKChsaW5lLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGNvbG9ycyA9IHtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRDb2xvcnMsXG4gICAgICAgICAgICAuLi5saW5lLmNvbG9yc1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGcga2V5PXtsaW5lLmtleSB8fCBpbmRleH0+XG4gICAgICAgICAgICAgIDxwYXRoIGQ9e2FyZWFGdW5jdGlvbihsaW5lLnZhbHVlcyl9IGZpbGw9e2NvbG9ycy5hcmVhfT5cbiAgICAgICAgICAgICAgICB7bGluZS50aXRsZSAmJiA8dGl0bGU+e2xpbmUudGl0bGV9PC90aXRsZT59XG4gICAgICAgICAgICAgIDwvcGF0aD5cbiAgICAgICAgICAgICAgPHBhdGggZD17bGluZUZ1bmN0aW9uKGxpbmUudmFsdWVzKX0gc3Ryb2tlPXtjb2xvcnMubGluZX0gZmlsbD1cIm5vbmVcIi8+XG4gICAgICAgICAgICA8L2c+XG4gICAgICAgICAgKVxuICAgICAgICB9KX1cbiAgICAgIDwvc3ZnPlxuICAgIClcbiAgfVxufVxuIl19